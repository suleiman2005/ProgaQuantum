Index: Textures.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import pygame\r\nfrom random import randint\r\nimport numpy as np\r\nm = randint(3, 5)\r\nn = randint(3, 5)\r\nl = randint(3, 6)\r\nk = randint(3, 6)\r\no = randint(5, 7)\r\np = randint(5, 8)\r\nr = randint(3, 6)\r\ns = randint(3, 6)\r\nt = randint(3, 5)\r\n\r\n\r\nabv = [[[2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2],\r\n        [2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2],\r\n        [2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2],\r\n        [2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2],\r\n        [2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,2,2,2,2,2,2,2],\r\n        [2,2,2,2,2,2,2,2,1,0,0,0,0,0,0,0,1,1,1,1,1,1,1,2,2,2,2,2,2,2],\r\n        [2,2,2,2,2,2,2,2,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2],\r\n        [2,2,2,2,2,2,2,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,2,2,2,2,2,2],\r\n        [2,2,2,2,2,2,2,2,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2],\r\n        [2,2,2,2,2,2,2,2,1,0,0,0,0,0,0,0,1,1,1,1,1,1,1,2,2,2,2,2,2,2],\r\n        [2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,2,2,2,2,2,2,2],\r\n        [2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2],\r\n        [2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2],\r\n        [2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2],\r\n        [2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2]\r\n       ],\r\n       [[2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2],\r\n        [2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2],\r\n        [2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2],\r\n        [2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2],\r\n        [2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,2,2,2],\r\n        [2,2,2,2,1,1,1,1,1,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,2,2,2],\r\n        [2,2,2,2,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2],\r\n        [2,2,2,2,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,2,2,2],\r\n        [2,2,2,2,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2],\r\n        [2,2,2,2,1,1,1,1,1,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,2,2,2],\r\n        [2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,2,2,2],\r\n        [2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2],\r\n        [2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2],\r\n        [2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2],\r\n        [2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2]\r\n       ],\r\n       [[1,1,1,1,1,m,1,1,1,1,1,1,9,1,1,1,1,m,1,1,1,1,t,1,l,1,1,1,1,1],\r\n        [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],\r\n        [1,0,1,s,1,1,1,1,1,m,9,9,1,1,1,r,1,9,9,9,1,1,1,k,1,1,k,1,0,1],\r\n        [1,0,9,1,s,1,1,n,1,1,1,1,1,9,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],\r\n        [1,0,1,1,m,1,1,1,1,1,r,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,l],\r\n        [0,0,1,1,1,1,1,1,9,0,0,0,0,0,0,0,9,1,1,k,1,1,1,8,m,n,1,1,1,1],\r\n        [1,1,1,1,1,1,1,k,1,0,l,9,1,1,1,1,k,1,1,1,1,1,1,1,1,1,1,1,1,1],\r\n        [1,o,1,p,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,9,1,1,n,l,1,1],\r\n        [1,1,1,1,1,m,1,1,1,0,9,1,1,m,1,1,1,1,1,k,1,1,l,1,1,1,1,1,1,1],\r\n        [0,0,9,1,k,1,1,1,9,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,o,9,1,1,1,1],\r\n        [t,0,1,9,1,n,1,1,1,1,l,1,r,1,1,0,1,1,9,1,1,1,1,1,9,1,1,1,1,1],\r\n        [1,0,1,1,1,1,1,1,p,1,1,1,s,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],\r\n        [1,0,t,9,1,s,1,1,1,1,1,1,1,p,1,9,1,m,1,1,n,1,1,1,1,1,1,1,0,1],\r\n        [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],\r\n        [1,1,t,s,1,1,1,n,1,1,1,1,1,n,1,r,1,1,1,l,1,1,n,1,1,1,1,1,1,1]\r\n       ]\r\n      ]\r\n\r\nstage = 3      \r\n\r\ngrass_surf = pygame.image.load(\"img/t1gr.png\")\r\ngrass1_surf = pygame.image.load(\"img/t2gr.png\")\r\nroad_surf = pygame.image.load(\"img/t1ro.png\")\r\ncloud_surf = pygame.image.load(\"img/cloud.png\")\r\nss1_surf = pygame.image.load(\"img/ss1.png\")\r\nss2_surf = pygame.image.load(\"img/ss2.png\")\r\nss3_surf = pygame.image.load(\"img/ss3.png\")\r\nss4_surf = pygame.image.load(\"img/ss4.png\")\r\nstone_surf = pygame.image.load(\"img/stone.png\")\r\nlake_surf = pygame.image.load(\"img/lake.png\")\r\nenemy1_surf = pygame.image.load(\"img/11.png\")\r\nenemy2_surf = pygame.image.load(\"img/12.png\")\r\nenemy3_surf = pygame.image.load(\"img/13.png\")\r\nenemy4_surf = pygame.image.load(\"img/14.png\")\r\nfort_surf = pygame.image.load(\"img/mom-tower-t.png\")\r\ndmg_surf = pygame.image.load(\"img/dmg.png\")\r\nWIDTH = 1200\r\nHEIGHT = 800\r\nBULLET_SPEED = 10\r\nscreen = pygame.display.set_mode((WIDTH, HEIGHT))\r\n\r\nWHITE = (255, 255, 255)\r\nBLACK = (0, 0, 0)\r\nGREEN = (0, 255, 0)\r\n\r\ndef textures():\r\n    for a in range(15):\r\n        for b in range(30):\r\n            if abv[stage-1][a][b] == 1:\r\n                i = grass_surf.get_rect(center=(20 + (b * 40), (a * 40) + 20))\r\n                screen.blit(grass_surf, i)\r\n            elif abv[stage-1][a][b] == 9:\r\n                i = grass1_surf.get_rect(center=(20 + (b * 40), (a * 40) + 20))\r\n                screen.blit(grass1_surf, i)\r\n            elif abv[stage-1][a][b] == 0:\r\n                i = road_surf.get_rect(center=(20 + (b * 40), (a * 40) + 20))\r\n                screen.blit(road_surf, i)\r\n            elif abv[stage-1][a][b] == 3:\r\n                i = ss1_surf.get_rect(center=(20 + (b * 40), (a * 40) + 20))\r\n                screen.blit(ss1_surf, i)\r\n            elif abv[stage-1][a][b] == 4:\r\n                i = ss2_surf.get_rect(center=(20 + (b * 40), (a * 40) + 20))\r\n                screen.blit(ss2_surf, i)\r\n            elif abv[stage-1][a][b] == 5:\r\n                i = ss3_surf.get_rect(center=(20 + (b * 40), (a * 40) + 20))\r\n                screen.blit(ss3_surf, i)\r\n            elif abv[stage - 1][a][b] == 6:\r\n                i = ss4_surf.get_rect(center=(20 + (b * 40), (a * 40) + 20))\r\n                screen.blit(ss4_surf, i)\r\n            elif abv[stage - 1][a][b] == 7:\r\n                i = stone_surf.get_rect(center=(0 + (b * 40), (a * 40) + 0))\r\n                screen.blit(stone_surf, i)\r\n            elif abv[stage - 1][a][b] == 8:\r\n                i = lake_surf.get_rect(center=(0 + (b * 40), (a * 40) + 0))\r\n                screen.blit(lake_surf, i)\r\n\r\n\r\ndef draw_bullet(x, y):\r\n\tpygame.draw.circle(screen, BLACK, (x, y), 1)\r\n\r\ndef draw_tower(x, y, z):\r\n    if z == 1:\r\n        tower_surf = pygame.image.load(\"img/tt1.png\")\r\n        i = tower_surf.get_rect(center=(x, y))\r\n        screen.blit(tower_surf, i)\r\n    if z == 2:\r\n        tower_surf = pygame.image.load(\"img/tt2.png\")\r\n        i = tower_surf.get_rect(center=(x, y))\r\n        screen.blit(tower_surf, i)\r\n    if z == 3:\r\n        tower_surf = pygame.image.load(\"img/tt3.png\")\r\n        i = tower_surf.get_rect(center=(x, y))\r\n        screen.blit(tower_surf, i)\r\n\r\ndef draw_enemy(enemy, time):\r\n    change = time - enemy.time_creation\r\n    if enemy.tik == 0:\r\n        enemy.tik = 4\r\n    if change//40 == change/40:\r\n        enemy.tik -= 1\r\n    if enemy.tik == 4:\r\n        i = enemy1_surf.get_rect(center=( (enemy.x), (enemy.y) ))\r\n        screen.blit(enemy1_surf, i)\r\n    if enemy.tik == 3:\r\n        i = enemy2_surf.get_rect(center=(  (enemy.x), (enemy.y)  ))\r\n        screen.blit(enemy2_surf, i)\r\n    if enemy.tik == 2:\r\n        i = enemy3_surf.get_rect(center=(  (enemy.x), (enemy.y)  ))\r\n        screen.blit(enemy3_surf, i)\r\n    if enemy.tik == 1:\r\n        i = enemy4_surf.get_rect(center=((enemy.x), (enemy.y)))\r\n        screen.blit(enemy4_surf, i)\r\n    if enemy.hp < 50:\r\n        i = dmg_surf.get_rect(center=(  (enemy.x), (enemy.y)  ))\r\n        screen.blit(dmg_surf, i)\r\ndef draw_fort(fort):\r\n    i = fort_surf.get_rect(center=((860), (290)))\r\n    screen.blit(fort_surf, i)\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Textures.py b/Textures.py
--- a/Textures.py	(revision bf9873bfb1526808c13d2c4d74e4d3a96cdcbe9c)
+++ b/Textures.py	(date 1670576383537)
@@ -44,7 +44,7 @@
         [2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2],
         [2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2]
        ],
-       [[1,1,1,1,1,m,1,1,1,1,1,1,9,1,1,1,1,m,1,1,1,1,t,1,l,1,1,1,1,1],
+       [[1,1,1,1,1,m,1,3,4,5,6,1,9,1,1,1,1,m,1,1,1,1,t,1,l,1,1,1,1,1],
         [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
         [1,0,1,s,1,1,1,1,1,m,9,9,1,1,1,r,1,9,9,9,1,1,1,k,1,1,k,1,0,1],
         [1,0,9,1,s,1,1,n,1,1,1,1,1,9,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
@@ -80,6 +80,7 @@
 enemy4_surf = pygame.image.load("img/14.png")
 fort_surf = pygame.image.load("img/mom-tower-t.png")
 dmg_surf = pygame.image.load("img/dmg.png")
+prb_surf = pygame.image.load("img/prb.png")
 WIDTH = 1200
 HEIGHT = 800
 BULLET_SPEED = 10
@@ -137,6 +138,10 @@
         tower_surf = pygame.image.load("img/tt3.png")
         i = tower_surf.get_rect(center=(x, y))
         screen.blit(tower_surf, i)
+def draw_tower1(x, y, z):
+    tower_surf = pygame.image.load("img/tt1.png")
+    i = tower_surf.get_rect(center=(x, y))
+    screen.blit(tower_surf, i)
 
 def draw_enemy(enemy, time):
     change = time - enemy.time_creation
@@ -159,6 +164,16 @@
     if enemy.hp < 50:
         i = dmg_surf.get_rect(center=(  (enemy.x), (enemy.y)  ))
         screen.blit(dmg_surf, i)
+def draw_enemy1(enemy, time):
+    change = time - enemy.time_creation
+    i = prb_surf.get_rect(center=((enemy.x), (enemy.y)))
+    screen.blit(prb_surf, i)
+def draw_enemy3(enemy, time):
+    change = time - enemy.time_creation
+    i = cloud_surf.get_rect(center=((enemy.x), (enemy.y)))
+    screen.blit(cloud_surf, i)
+
+
 def draw_fort(fort):
     i = fort_surf.get_rect(center=((860), (290)))
     screen.blit(fort_surf, i)
Index: Classes.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from math import *\r\nfrom Textures import *\r\n\r\nSIDE = 40\r\n\r\nis_free_for_tower = [[[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\r\n                      [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\r\n                      [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\r\n                      [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\r\n                      [0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,0,0,0,0,0,0],\r\n                      [0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,1,1,1,1,1,1,0,0,0,0,0,0,0],\r\n                      [0,0,0,0,0,0,0,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0],\r\n                      [0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0],\r\n                      [0,0,0,0,0,0,0,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0],\r\n                      [0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,1,1,1,1,1,1,0,0,0,0,0,0,0],\r\n                      [0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,0,0,0,0,0,0],\r\n                      [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\r\n                      [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\r\n                      [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\r\n                      [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]\r\n                     ],\r\n                     [[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\r\n                      [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\r\n                      [0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0],\r\n                      [0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\r\n                      [0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0],\r\n                      [0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0],\r\n                      [0,0,0,0,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0],\r\n                      [0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0],\r\n                      [0,0,0,0,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0],\r\n                      [0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0],\r\n                      [0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0],\r\n                      [0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\r\n                      [0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0],\r\n                      [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\r\n                      [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]\r\n                     ],\r\n                     [[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],\r\n                      [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],\r\n                      [1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1],\r\n                      [1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],\r\n                      [1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1],\r\n                      [0,0,1,1,1,1,1,1,1,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1],\r\n                      [1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],\r\n                      [1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1],\r\n                      [1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],\r\n                      [0,0,1,1,1,1,1,1,1,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1],\r\n                      [1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1],\r\n                      [1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],\r\n                      [1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1],\r\n                      [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],\r\n                      [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]\r\n                     ]\r\n                    ]\r\nenemies = []\r\ntowers = []\r\nbullets = []\r\n\r\nclass Bullet:\r\n    def __init__(self, x, y, vx, vy, dmg):\r\n        self.x = x\r\n        self.y = y\r\n        self.vx = vx\r\n        self.vy = vy\r\n        self.dmg = dmg\r\n        self.live = 1\r\n\t\r\n    def draw_and_move(self):\r\n        draw_bullet(self.x, self.y)\r\n        self.x += self.vx\r\n        self.y += self.vy\r\n        \r\n    def hit_enemies(self, money):\r\n        for enemy in enemies:\r\n            if (enemy.x-self.x)**2 + (enemy.y-self.y)**2 <= enemy.radius**2:\r\n                money = enemy.hit(self.dmg, money)\r\n                bullets.remove(self)\r\n                break\r\n        return money\r\n                \r\n\t\r\n\r\nclass Tower1:\r\n    \"\"\"Класс первой башни (с дискретными снарядами)\"\"\"\r\n    def __init__(self, screen, x_square, y_square):\r\n        global is_free_for_tower\r\n        self.x_square = x_square\r\n        self.y_square = y_square\r\n        self.x = self.x_square * SIDE + SIDE // 2\r\n        self.y = self.y_square * SIDE + SIDE // 2\r\n        if is_free_for_tower[stage-1][self.y_square][self.x_square] != 1:\r\n            self.x = None\r\n            self.y = None\r\n        else:\r\n            is_free_for_tower[stage-1][self.y_square][self.x_square] = 2 + len(towers)\r\n        self.screen = screen\r\n        self.dmg = 50\r\n        # Урон пушки\r\n        self.speed = 30\r\n        # Скорострельность\r\n        self.angle = 0\r\n        # Угол поворота\r\n        self.radius = 200\r\n        # Дальнобойность\r\n        self.level = 1\r\n        # Уровень башни (максимум 3)\r\n        self.price = 100\r\n        # Стоимость башни в у.е.\r\n        self.upgrade_price = [20, 30, 40]\r\n        # Стоимость улучшения башни (меняется в процессе (локальной) прогрессии)\r\n        self.image = np.array([])\r\n        # Переменная, хранящая изображение башни\r\n        self.attacked_enemy = None\r\n        # Переменная, хранящая атакованного врага\r\n\r\n    def shoot(self, enemies):\r\n        \"\"\" Функция выстрела по врагу\r\n        enemies - список активных врагов на карте\"\"\"\r\n        if self.attacked_enemy:\r\n            if ((self.attacked_enemy.x - self.x) ** 2 + (self.attacked_enemy.y - self.y) ** 2) > self.radius ** 2 \\\r\n                    or self.attacked_enemy.hp <= 0:\r\n                self.attacked_enemy = None\r\n                self.shoot(enemies)\r\n            else:\r\n                self.angle = atan2(self.attacked_enemy.y - self.y, self.attacked_enemy.x - self.x)\r\n                vx = BULLET_SPEED * cos(self.angle)\r\n                vy = BULLET_SPEED * sin(self.angle)\r\n                if self.attacked_enemy.axis == 'x':\r\n                    vx += self.attacked_enemy.speed\r\n                else:\r\n                    vy += self.attacked_enemy.speed\r\n                bullet = Bullet(self.x, self.y, vx, vy, self.dmg)\r\n                bullets.append(bullet)\r\n        else:\r\n            min_distance = self.radius\r\n            for enemy in enemies:\r\n                enemy_distance = np.sqrt((enemy.x - self.x) ** 2 + (enemy.y - self.y) ** 2)\r\n                if enemy_distance <= min_distance:\r\n                    min_distance = enemy_distance\r\n                    self.attacked_enemy = enemy\r\n            if self.attacked_enemy:\r\n                self.shoot(enemies)\r\n\r\n    def upgrade(self):\r\n        \"\"\"Если уровень не максимальный и достаточно денег, улучшает башню\"\"\"\r\n        self.level += 1\r\n        self.dmg += 10\r\n        self.speed += 10\r\n        self.radius += 20\r\n\r\n    def draw(self):\r\n        \"\"\"Рисует башню (тут должна использоваться переменная self.image, но рисунков пока нет((((,\r\n        поэтому рисует круг с дулом)\"\"\"\r\n        pygame.draw.line(self.screen, (0, 0, 0), (self.x, self.y),\r\n                         (self.x + 20 * cos(self.angle), self.y + 20 * sin(self.angle)), 2)\r\n        draw_tower(self.x, self.y, self.level)\r\n\r\n    def sell(self, towers):\r\n        \"\"\"Функция продажи башни\"\"\"\r\n        for tower_index in range(len(towers)):\r\n            if tower_index > is_free_for_tower[stage-1][self.y_square][self.x_square] - 2:\r\n                is_free_for_tower[stage-1][towers[tower_index].y_square][towers[tower_index].x_square] -= 1\r\n        is_free_for_tower[stage-1][self.y_square][self.x_square] = 1\r\n        towers.remove(self)\r\n\r\n\r\nclass Enemy1:\r\n    \"\"\"Класс, описывающий превый тип врага\"\"\"\r\n    def __init__(self, screen, x, y, time_creation):\r\n        self.time_creation = time_creation\r\n        self.screen = screen\r\n        self.x = x\r\n        self.y = y\r\n        self.tik = 4\r\n        self.speed = 1\r\n        # Скорость юнита\r\n        self.axis = 'x'\r\n        #Ось движения юнита\r\n        self.dmg = 10\r\n        # Урон юнита по главной постройке\r\n        self.hp = 110\r\n        # Здоровье юнита\r\n        self.reward = 30\r\n        # Вознаграждение за убийство юнита\r\n        self.image = np.array([])\r\n        # Изображение юнита\r\n        self.radius = 10\r\n        # Временная (!!!!!) переменная, отвечающая за размер врага\r\n\r\n\r\n    def hit(self, tower_damage, money):\r\n        \"\"\"Функция, отвечающая за боль и страдания юнита\"\"\"\r\n        self.hp -= tower_damage\r\n        if self.hp <= 0:\r\n            money += self.reward\r\n            enemies.remove(self)\r\n        return money\r\n\r\n    def move(self):\r\n        \"\"\"Функция, двигающаяя юнита\"\"\"\r\n        if self.axis == 'x' and abv[stage-1][self.y // SIDE][(self.x+np.sign(self.speed)*(SIDE//2+1)) // SIDE] != 0:\r\n            self.axis = 'y'\r\n            self.x = (self.x//SIDE) * SIDE + SIDE // 2\r\n            if abv[stage-1][(self.y+np.sign(self.speed)*(SIDE//2+1)) // SIDE][self.x // SIDE] != 0:\r\n                self.speed = -self.speed\r\n        elif self.axis == 'y' and (abv[stage-1][(self.y+np.sign(self.speed)*(SIDE//2+1)) // SIDE][self.x // SIDE] != 0 or abs(self.y - 300) <= abs(self.speed) / 2):\r\n            self.axis = 'x'\r\n            self.y = (self.y//SIDE) * SIDE + SIDE // 2\r\n            if abv[stage-1][self.y // SIDE][(self.x+np.sign(self.speed)*(SIDE//2+1)) // SIDE] != 0:\r\n                self.speed = -self.speed\r\n        if self.axis == 'x':\r\n            self.x += self.speed\r\n        else:\r\n            self.y += self.speed\r\n        if self.y == 300 and self.x >= 840:\r\n            self.x = 840\r\n\r\n    def attack(self, fortress):\r\n        fortress.hp -= self.dmg\r\n\r\n    def draw(self, time):\r\n        draw_enemy(self, time)\r\n\r\n\r\nclass Fortress:\r\n    \"\"\"Класс описывающий главное здание\"\"\"\r\n    def __init__(self, screen):\r\n        self.screen = screen\r\n        self.x = 860\r\n        self.y = 300\r\n        self.hp = 10000\r\n        self.is_alive = True\r\n\r\n    def hit(self, enemies):\r\n        \"\"\"Функция, отвечающая за повреждения главного здания\"\"\"\r\n        for enemy in enemies:\r\n            enemy_distance = np.sqrt((self.x - enemy.x) ** 2 + (self.y - enemy.y) ** 2)\r\n            if enemy_distance == 20:\r\n                enemy.attack(self)\r\n                if self.hp <= 0:\r\n                    self.is_alive = False\r\n\r\n    def alive_or_not(self):\r\n        \"\"\"Функция, отвечающая на вопрос: \"проиграл ли игрок?\" \"\"\"\r\n        return self.is_alive\r\n\r\n    def draw(self):\r\n        draw_fort(self)\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Classes.py b/Classes.py
--- a/Classes.py	(revision bf9873bfb1526808c13d2c4d74e4d3a96cdcbe9c)
+++ b/Classes.py	(date 1670576467223)
@@ -53,6 +53,7 @@
                      ]
                     ]
 enemies = []
+enemies1 = []
 towers = []
 bullets = []
 
@@ -141,6 +142,7 @@
             if self.attacked_enemy:
                 self.shoot(enemies)
 
+
     def upgrade(self):
         """Если уровень не максимальный и достаточно денег, улучшает башню"""
         self.level += 1
@@ -171,14 +173,15 @@
         self.screen = screen
         self.x = x
         self.y = y
+        self.type = 1
         self.tik = 4
-        self.speed = 1
+        self.speed = 2
         # Скорость юнита
         self.axis = 'x'
         #Ось движения юнита
         self.dmg = 10
         # Урон юнита по главной постройке
-        self.hp = 110
+        self.hp = 200
         # Здоровье юнита
         self.reward = 30
         # Вознаграждение за убийство юнита
@@ -222,6 +225,64 @@
         draw_enemy(self, time)
 
 
+class Enemy2:
+    """Класс, описывающий 2 тип врага"""
+    def __init__(self, screen, x, y, time_creation):
+        self.time_creation = time_creation
+        self.screen = screen
+        self.x = x
+        self.y = y
+        self.type = 2
+        self.tik = 4
+        self.speed = 1
+        # Скорость юнита
+        self.axis = 'x'
+        #Ось движения юнита
+        self.dmg = 10
+        # Урон юнита по главной постройке
+        self.hp = 2800
+        # Здоровье юнита
+        self.reward = 30
+        # Вознаграждение за убийство юнита
+        self.image = np.array([])
+        # Изображение юнита
+        self.radius = 10
+        # Временная (!!!!!) переменная, отвечающая за размер врага
+
+
+    def hit(self, tower_damage, money):
+        """Функция, отвечающая за боль и страдания юнита"""
+        self.hp -= tower_damage
+        if self.hp <= 0:
+            money += self.reward
+            enemies.remove(self)
+        return money
+
+    def move(self):
+        """Функция, двигающаяя юнита"""
+        if self.axis == 'x' and abv[stage-1][self.y // SIDE][(self.x+np.sign(self.speed)*(SIDE//2+1)) // SIDE] != 0:
+            self.axis = 'y'
+            self.x = (self.x//SIDE) * SIDE + SIDE // 2
+            if abv[stage-1][(self.y+np.sign(self.speed)*(SIDE//2+1)) // SIDE][self.x // SIDE] != 0:
+                self.speed = -self.speed
+        elif self.axis == 'y' and (abv[stage-1][(self.y+np.sign(self.speed)*(SIDE//2+1)) // SIDE][self.x // SIDE] != 0 or abs(self.y - 300) <= abs(self.speed) / 2):
+            self.axis = 'x'
+            self.y = (self.y//SIDE) * SIDE + SIDE // 2
+            if abv[stage-1][self.y // SIDE][(self.x+np.sign(self.speed)*(SIDE//2+1)) // SIDE] != 0:
+                self.speed = -self.speed
+        if self.axis == 'x':
+            self.x += self.speed
+        else:
+            self.y += self.speed
+        if self.y == 300 and self.x >= 840:
+            self.x = 840
+
+    def attack(self, fortress):
+        fortress.hp -= self.dmg
+
+    def draw(self, time):
+        draw_enemy1(self, time)
+
 class Fortress:
     """Класс описывающий главное здание"""
     def __init__(self, screen):
Index: main.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from Textures import *\r\nfrom Buttons import *\r\nfrom Classes import *\r\nimport random as rnd\r\n\r\n\r\nFPS = 60\r\n\r\n\r\npygame.init()\r\nscreen = pygame.display.set_mode((WIDTH, HEIGHT))\r\ntext_font = pygame.font.Font(None, 24)\r\nplay_menu_text_surface = pygame.font.SysFont('Comic Sans MS', 30, True)\r\ntext = \"\"\r\nplay_menu_surface = pygame.image.load('img/игровое меню.png').convert()\r\nplay_menu_surface.set_colorkey((255, 255, 255))\r\nplay_menu_surface = pygame.transform.scale(play_menu_surface, (play_menu_surface.get_width() // 1.45, play_menu_surface.get_height() // 1.135))\r\nplay_menu_rect = play_menu_surface.get_rect(center=(WIDTH // 2, 700))\r\nclock = pygame.time.Clock()\r\nfinished = False\r\nfortress = Fortress(screen)\r\nbuttons = [QuitButton(screen, 1100, 0, text_font)]\r\nmoney = 200\r\ntime = 0\r\nDelta_t = 1\r\nx_square_light = -1\r\ny_square_light = -1\r\n\r\nWHITE = (255, 255, 255)\r\nBLACK = (0, 0, 0)\r\nGREEN = (0, 255, 0)\r\n\r\nwhile not finished:\r\n    screen.fill(WHITE)\r\n    textures()\r\n    clock.tick(FPS)\r\n    screen.blit(text_font.render(\"Money \" + str(money), True, (0, 0, 0)), (10, 10))\r\n\r\n    for event in pygame.event.get():\r\n\r\n        if event.type == pygame.MOUSEBUTTONDOWN:\r\n            erase_useless_buttons(buttons)\r\n            for button in buttons:\r\n                if button.is_pressed(event):\r\n                    if button.type == \"quit_button\":\r\n                        finished = True\r\n            if event.button == 1:\r\n                erase_useless_buttons(buttons)\r\n                if event.pos[1] < 600:\r\n                    x_square_light = event.pos[0] // SIDE\r\n                    y_square_light = event.pos[1] // SIDE\r\n                    if is_free_for_tower[stage-1][y_square_light][x_square_light] == 0:\r\n                        text = \"You can't build tower there\"\r\n                    elif is_free_for_tower[stage-1][y_square_light][x_square_light] == 1:\r\n                        text = \"You can build tower there\"\r\n                        buttons.append(BuildButton(screen, 600, 650, play_menu_text_surface))\r\n                    else:\r\n                        text = \"There is tower LVL \" + \\\r\n                               str(towers[is_free_for_tower[stage-1][y_square_light][x_square_light] - 2].level)\r\n                        buttons.append(UpgradeButton(screen, 600, 650, play_menu_text_surface))\r\n                        buttons.append(SellButton(screen, 900, 650, play_menu_text_surface))\r\n                else:\r\n                    if is_free_for_tower[stage-1][y_square_light][x_square_light] == 1:\r\n                        buttons.append(BuildButton(screen, 600, 650, play_menu_text_surface))\r\n                    elif is_free_for_tower[stage-1][y_square_light][x_square_light] > 1:\r\n                        buttons.append(UpgradeButton(screen, 600, 650, play_menu_text_surface))\r\n                        buttons.append(SellButton(screen, 900, 650, play_menu_text_surface))\r\n                    for button in buttons:\r\n                        if button.is_pressed(event):\r\n                            if button.type == \"upgrade_button\":\r\n                                twr = towers[is_free_for_tower[stage-1][y_square_light][x_square_light] - 2]\r\n                                money, text = button.upgrade_initiation(twr, money)\r\n                            if button.type == \"sell_button\":\r\n                                twr = towers[is_free_for_tower[stage-1][y_square_light][x_square_light] - 2]\r\n                                money += twr.price / 2\r\n                                while twr.level > 1:\r\n                                    money += twr.upgrade_price[twr.level - 1] / 2\r\n                                    twr.level -= 1\r\n                                twr.sell(towers)\r\n                                text = \"You can build tower there\"\r\n                                erase_useless_buttons(buttons)\r\n                                buttons.remove(button)\r\n                                buttons.append(BuildButton(screen, 600, 650, play_menu_text_surface))\r\n                            if button.type == \"build_button\":\r\n                                money, text = button.build_initiation(money, towers, screen, x_square_light,\r\n                                                                      y_square_light, buttons, button,\r\n                                                                      play_menu_text_surface)\r\n\r\n        elif event.type == pygame.KEYDOWN:\r\n            if event.key == pygame.K_ESCAPE:\r\n                finished = True\r\n            elif event.key == pygame.K_z:\r\n                for button in buttons:\r\n                    if button.type == \"upgrade_button\":\r\n                        if is_free_for_tower[stage-1][y_square_light][x_square_light] > 1:\r\n                            twr = towers[is_free_for_tower[stage-1][y_square_light][x_square_light] - 2]\r\n                            money, text = button.upgrade_initiation(twr, money)\r\n                    if button.type == \"build_button\":\r\n                        money, text = button.build_initiation(money, towers, screen, x_square_light, y_square_light, buttons,\r\n                                                        button, play_menu_text_surface)\r\n            elif event.key == pygame.K_x:\r\n                for button in buttons:\r\n                    if button.type == \"sell_button\":\r\n                        twr = towers[is_free_for_tower[stage-1][y_square_light][x_square_light] - 2]\r\n                        money += twr.price / 2\r\n                        while twr.level > 1:\r\n                            money += twr.upgrade_price[twr.level - 1] / 2\r\n                            twr.level -= 1\r\n                        twr.sell(towers)\r\n                        text = \"You can build tower there\"\r\n                        erase_useless_buttons(buttons)\r\n                        buttons.remove(button)\r\n                        buttons.append(BuildButton(screen, 600, 650, play_menu_text_surface))\r\n\r\n        elif event.type == pygame.QUIT:\r\n            finished = True\r\n\r\n    if x_square_light != -1:\r\n        pygame.draw.polygon(screen, GREEN, ((x_square_light*SIDE, y_square_light*SIDE),\r\n                                            (x_square_light*SIDE + SIDE, y_square_light*SIDE),\r\n                                            (x_square_light*SIDE + SIDE, y_square_light*SIDE + SIDE),\r\n                                            (x_square_light*SIDE, y_square_light*SIDE + SIDE)), 1)\r\n    random_number = rnd.randint(1, 100)\r\n    if random_number == 1:\r\n        enemy = Enemy1(screen, 0, 220, time)\r\n        enemies.append(enemy)\r\n    elif random_number == 100:\r\n        enemy = Enemy1(screen, 0, 380, time)\r\n        enemies.append(enemy)\r\n    for enemy in enemies:\r\n        enemy.move()\r\n        enemy.draw(time)\r\n    for tower in towers:\r\n        tower.draw()\r\n        if time % tower.speed == 0:\r\n            tower.shoot(enemies)\r\n    for bullet in bullets:\r\n        bullet.draw_and_move()\r\n        money = bullet.hit_enemies(money)\r\n    fortress.hit(enemies)\r\n    if not fortress.alive_or_not():\r\n        finished = True\r\n\r\n    time += Delta_t\r\n    screen.blit(play_menu_surface, play_menu_rect)\r\n    screen.blit(play_menu_text_surface.render(text, True, BLACK), (100, 675))\r\n    for button in buttons:\r\n        button.draw()\r\n    fortress.draw()\r\n    pygame.display.update()\r\n\r\npygame.quit()\r\n\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/main.py b/main.py
--- a/main.py	(revision bf9873bfb1526808c13d2c4d74e4d3a96cdcbe9c)
+++ b/main.py	(date 1670576467191)
@@ -127,9 +127,19 @@
     elif random_number == 100:
         enemy = Enemy1(screen, 0, 380, time)
         enemies.append(enemy)
+
+
+    random_number = rnd.randint(1, 1000)
+    if random_number == 1:
+        enemy = Enemy2(screen, 0, 220, time)
+        enemies.append(enemy)
+    elif random_number == 100:
+        enemy = Enemy2(screen, 0, 380, time)
+        enemies.append(enemy)
     for enemy in enemies:
         enemy.move()
         enemy.draw(time)
+
     for tower in towers:
         tower.draw()
         if time % tower.speed == 0:
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"b335f9ad-e810-4b10-9557-e0b214f25eda\" name=\"Changes\" comment=\"некоторые test модели и случайный ландшафт\">\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/Classes.py\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/Classes.py\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/Textures.py\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/Textures.py\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/img/cloud.png\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/img/cloud.png\" afterDir=\"false\" />\r\n    </list>\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"FileTemplateManagerImpl\">\r\n    <option name=\"RECENT_TEMPLATES\">\r\n      <list>\r\n        <option value=\"Python Script\" />\r\n      </list>\r\n    </option>\r\n  </component>\r\n  <component name=\"Git.Settings\">\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\r\n  </component>\r\n  <component name=\"MarkdownSettingsMigration\">\r\n    <option name=\"stateVersion\" value=\"1\" />\r\n  </component>\r\n  <component name=\"ProjectId\" id=\"2IKEwcYEGPyJEKyqhMOzN3a8CtR\" />\r\n  <component name=\"ProjectLevelVcsManager\">\r\n    <OptionsSetting value=\"false\" id=\"Update\" />\r\n  </component>\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\"><![CDATA[{\r\n  \"keyToString\": {\r\n    \"RunOnceActivity.OpenProjectViewOnStart\": \"true\",\r\n    \"RunOnceActivity.ShowReadmeOnStart\": \"true\",\r\n    \"last_opened_file_path\": \"C:/Users/areme/ProgaQuantum\",\r\n    \"settings.editor.selected.configurable\": \"com.jetbrains.python.configuration.PyActiveSdkModuleConfigurable\"\r\n  }\r\n}]]></component>\r\n  <component name=\"RunManager\">\r\n    <configuration name=\"main\" type=\"PythonConfigurationType\" factoryName=\"Python\" nameIsGenerated=\"true\">\r\n      <module name=\"ProgaQuantum\" />\r\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\r\n      <option name=\"PARENT_ENVS\" value=\"true\" />\r\n      <envs>\r\n        <env name=\"PYTHONUNBUFFERED\" value=\"1\" />\r\n      </envs>\r\n      <option name=\"SDK_HOME\" value=\"\" />\r\n      <option name=\"WORKING_DIRECTORY\" value=\"$PROJECT_DIR$\" />\r\n      <option name=\"IS_MODULE_SDK\" value=\"true\" />\r\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\r\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\r\n      <option name=\"SCRIPT_NAME\" value=\"$PROJECT_DIR$/main.py\" />\r\n      <option name=\"PARAMETERS\" value=\"\" />\r\n      <option name=\"SHOW_COMMAND_LINE\" value=\"false\" />\r\n      <option name=\"EMULATE_TERMINAL\" value=\"false\" />\r\n      <option name=\"MODULE_MODE\" value=\"false\" />\r\n      <option name=\"REDIRECT_INPUT\" value=\"false\" />\r\n      <option name=\"INPUT_FILE\" value=\"\" />\r\n      <method v=\"2\" />\r\n    </configuration>\r\n  </component>\r\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\r\n      <changelist id=\"b335f9ad-e810-4b10-9557-e0b214f25eda\" name=\"Changes\" comment=\"\" />\r\n      <created>1669922113170</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1669922113170</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00001\" summary=\"test\">\r\n      <created>1669922452656</created>\r\n      <option name=\"number\" value=\"00001\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00001\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1669922452656</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00002\" summary=\"Починил кнопку улучшения\">\r\n      <created>1669966502588</created>\r\n      <option name=\"number\" value=\"00002\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00002\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1669966502588</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00003\" summary=\"Реализованна продажа башен\">\r\n      <created>1669967463344</created>\r\n      <option name=\"number\" value=\"00003\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00003\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1669967463344</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00004\" summary=\"ААААА Я ВСЁЁЁ ПОЧИИНИИИЛ&#10;смена тестовых моделей врагов и башен при апгрейде\">\r\n      <created>1669971606735</created>\r\n      <option name=\"number\" value=\"00004\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00004\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1669971606735</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00005\" summary=\"Теперь программа смещает индексы при продаже башен и не случается list index out of range\">\r\n      <created>1669972030056</created>\r\n      <option name=\"number\" value=\"00005\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00005\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1669972030056</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00006\" summary=\"Осуществил постройку башен через кнопку в менюшке\">\r\n      <created>1669993980324</created>\r\n      <option name=\"number\" value=\"00006\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00006\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1669993980324</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00007\" summary=\"некоторые test модели и случайный ландшафт\">\r\n      <created>1670566121921</created>\r\n      <option name=\"number\" value=\"00007\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00007\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1670566121921</updated>\r\n    </task>\r\n    <option name=\"localTasksCounter\" value=\"8\" />\r\n    <servers />\r\n  </component>\r\n  <component name=\"Vcs.Log.Tabs.Properties\">\r\n    <option name=\"TAB_STATES\">\r\n      <map>\r\n        <entry key=\"MAIN\">\r\n          <value>\r\n            <State />\r\n          </value>\r\n        </entry>\r\n      </map>\r\n    </option>\r\n  </component>\r\n  <component name=\"VcsManagerConfiguration\">\r\n    <MESSAGE value=\"test\" />\r\n    <MESSAGE value=\"Починил кнопку улучшения\" />\r\n    <MESSAGE value=\"Реализованна продажа башен\" />\r\n    <MESSAGE value=\"ААААА Я ВСЁЁЁ ПОЧИИНИИИЛ&#10;смена тестовых моделей врагов и башен при апгрейде\" />\r\n    <MESSAGE value=\"Теперь программа смещает индексы при продаже башен и не случается list index out of range\" />\r\n    <MESSAGE value=\"Осуществил постройку башен через кнопку в менюшке\" />\r\n    <MESSAGE value=\"некоторые test модели и случайный ландшафт\" />\r\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"некоторые test модели и случайный ландшафт\" />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision bf9873bfb1526808c13d2c4d74e4d3a96cdcbe9c)
+++ b/.idea/workspace.xml	(date 1670573249983)
@@ -1,11 +1,11 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <project version="4">
   <component name="ChangeListManager">
-    <list default="true" id="b335f9ad-e810-4b10-9557-e0b214f25eda" name="Changes" comment="некоторые test модели и случайный ландшафт">
+    <list default="true" id="b335f9ad-e810-4b10-9557-e0b214f25eda" name="Changes" comment="еще модели, ландшафт и анимации">
       <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/Classes.py" beforeDir="false" afterPath="$PROJECT_DIR$/Classes.py" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/Textures.py" beforeDir="false" afterPath="$PROJECT_DIR$/Textures.py" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/img/cloud.png" beforeDir="false" afterPath="$PROJECT_DIR$/img/cloud.png" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/main.py" beforeDir="false" afterPath="$PROJECT_DIR$/main.py" afterDir="false" />
     </list>
     <option name="SHOW_DIALOG" value="false" />
     <option name="HIGHLIGHT_CONFLICTS" value="true" />
@@ -122,7 +122,14 @@
       <option name="project" value="LOCAL" />
       <updated>1670566121921</updated>
     </task>
-    <option name="localTasksCounter" value="8" />
+    <task id="LOCAL-00008" summary="еще модели, ландшафт и анимации">
+      <created>1670572686648</created>
+      <option name="number" value="00008" />
+      <option name="presentableId" value="LOCAL-00008" />
+      <option name="project" value="LOCAL" />
+      <updated>1670572686648</updated>
+    </task>
+    <option name="localTasksCounter" value="9" />
     <servers />
   </component>
   <component name="Vcs.Log.Tabs.Properties">
@@ -144,6 +151,7 @@
     <MESSAGE value="Теперь программа смещает индексы при продаже башен и не случается list index out of range" />
     <MESSAGE value="Осуществил постройку башен через кнопку в менюшке" />
     <MESSAGE value="некоторые test модели и случайный ландшафт" />
-    <option name="LAST_COMMIT_MESSAGE" value="некоторые test модели и случайный ландшафт" />
+    <MESSAGE value="еще модели, ландшафт и анимации" />
+    <option name="LAST_COMMIT_MESSAGE" value="еще модели, ландшафт и анимации" />
   </component>
 </project>
\ No newline at end of file
