Index: Textures.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import pygame\r\nfrom random import randint\r\nimport numpy as np\r\nimport Common_list\r\n\r\ngrass_surf = pygame.image.load(\"img/t1gr.png\")\r\ngrass1_surf = pygame.image.load(\"img/t2gr.png\")\r\nroad_surf = pygame.image.load(\"img/t1ro.png\")\r\ncloud_surf = pygame.image.load(\"img/cloud.png\")\r\nss1_surf = pygame.image.load(\"img/ss1.png\")\r\nss2_surf = pygame.image.load(\"img/ss2.png\")\r\nss3_surf = pygame.image.load(\"img/ss3.png\")\r\nss4_surf = pygame.image.load(\"img/ss4.png\")\r\ntower_surf_1 = pygame.image.load(\"img/tt1.png\")\r\ntower_surf_2 = pygame.image.load(\"img/tt2.png\")\r\ntower_surf_3 = pygame.image.load(\"img/tt3.png\")\r\nstone_surf = pygame.image.load(\"img/stone.png\")\r\nlake_surf = pygame.image.load(\"img/lake.png\")\r\nenemy1_surf = pygame.image.load(\"img/11.png\")\r\nenemy2_surf = pygame.image.load(\"img/12.png\")\r\nenemy3_surf = pygame.image.load(\"img/13.png\")\r\nenemy4_surf = pygame.image.load(\"img/14.png\")\r\nfort_surf = pygame.image.load(\"img/mom-tower-t.png\")\r\ndmg_surf = pygame.image.load(\"img/dmg.png\")\r\nprb_surf = pygame.image.load(\"img/prb.png\")\r\nmain_back_surface = pygame.image.load('img/main_back.png')\r\nplay_menu_surface = pygame.image.load('img/игровое меню.png')\r\n\r\nWIDTH = 1200\r\nHEIGHT = 800\r\nBULLET_SPEED = 10\r\nscreen = pygame.display.set_mode((WIDTH, HEIGHT))\r\nplay_menu_surface.set_colorkey((255, 255, 255))\r\nmain_back_surface.set_colorkey((255, 255, 255))\r\nplay_menu_surface = pygame.transform.scale(play_menu_surface, (play_menu_surface.get_width() // 1.45, play_menu_surface.get_height() // 1.135))\r\nplay_menu_rect = play_menu_surface.get_rect(center=(WIDTH // 2, 700))\r\n\r\nWHITE = (255, 255, 255)\r\nBLACK = (0, 0, 0)\r\nGREEN = (0, 255, 0)\r\n\r\ndef generate_textures():\r\n    m = randint(3, 5)\r\n    n = randint(3, 5)\r\n    l = randint(3, 6)\r\n    k = randint(3, 6)\r\n    o = randint(5, 7)\r\n    p = randint(5, 8)\r\n    r = randint(3, 6)\r\n    s = randint(3, 6)\r\n    t = randint(3, 5)\r\n    \r\n    Common_list.abv = [[[2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2],\r\n            [2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2],\r\n            [2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2],\r\n            [2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2],\r\n            [2,2,2,2,2,2,2,2,1,1,r,1,1,1,1,0,1,1,1,1,1,1,1,2,2,2,2,2,2,2],\r\n            [2,2,2,2,2,2,2,2,9,0,0,0,0,0,0,0,9,1,1,k,1,1,1,2,2,2,2,2,2,2],\r\n            [2,2,2,2,2,2,2,2,1,0,l,9,1,1,1,1,k,1,1,1,1,1,1,2,2,2,2,2,2,2],\r\n            [2,2,2,2,2,2,2,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,2,2,2,2,2,2],\r\n            [2,2,2,2,2,2,2,2,1,0,9,1,1,m,1,1,1,1,1,k,1,1,l,2,2,2,2,2,2,2],\r\n            [2,2,2,2,2,2,2,2,9,0,0,0,0,0,0,0,1,1,1,1,1,1,1,2,2,2,2,2,2,2],\r\n            [2,2,2,2,2,2,2,2,1,1,l,1,r,1,1,0,1,1,9,1,1,1,1,2,2,2,2,2,2,2],\r\n            [2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2],\r\n            [2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2],\r\n            [2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2],\r\n            [2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2]\r\n           ],\r\n           [[2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2],\r\n            [2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2],\r\n            [2,2,2,2,1,1,1,1,1,m,9,9,1,1,1,r,1,9,9,9,1,1,1,k,1,1,k,2,2,2],\r\n            [2,2,2,2,s,1,1,n,1,1,1,1,1,9,1,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2],\r\n            [2,2,2,2,m,1,1,1,1,1,r,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,2,2,2],\r\n            [2,2,2,2,1,1,1,1,9,0,0,0,0,0,0,0,9,1,1,k,1,1,1,8,m,n,1,2,2,2],\r\n            [2,2,2,2,1,1,1,k,1,0,l,9,1,1,1,1,k,1,1,1,1,1,1,1,1,1,1,2,2,2],\r\n            [2,2,2,2,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,9,1,1,n,2,2,2],\r\n            [2,2,2,2,1,m,1,1,1,0,9,1,1,m,1,1,1,1,1,k,1,1,l,1,1,1,1,2,2,2],\r\n            [2,2,2,2,k,1,1,1,9,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,o,9,1,2,2,2],\r\n            [2,2,2,2,1,n,1,1,1,1,l,1,r,1,1,0,1,1,9,1,1,1,1,1,9,1,1,2,2,2],\r\n            [2,2,2,2,1,1,1,1,p,1,1,1,s,1,1,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2],\r\n            [2,2,2,2,1,s,1,1,1,1,1,1,1,p,1,9,1,m,1,1,n,1,1,1,1,1,1,2,2,2],\r\n            [2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2],\r\n            [2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2]\r\n           ],\r\n           [[1,1,1,1,1,m,1,3,4,5,6,1,9,1,1,1,1,m,1,1,1,1,t,1,l,1,1,1,1,1],\r\n            [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],\r\n            [1,0,1,s,1,1,1,1,1,m,9,9,1,1,1,r,1,9,9,9,1,1,1,k,1,1,k,1,0,1],\r\n            [1,0,9,1,s,1,1,n,1,1,1,1,1,9,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],\r\n            [1,0,1,1,m,1,1,1,1,1,r,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,l],\r\n            [0,0,1,1,1,1,1,1,9,0,0,0,0,0,0,0,9,1,1,k,1,1,1,8,m,n,1,1,1,1],\r\n            [1,1,1,1,1,1,1,k,1,0,l,9,1,1,1,1,k,1,1,1,1,1,1,1,1,1,1,1,1,1],\r\n            [1,o,1,p,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,9,1,1,n,l,1,1],\r\n            [1,1,1,1,1,m,1,1,1,0,9,1,1,m,1,1,1,1,1,k,1,1,l,1,1,1,1,1,1,1],\r\n            [0,0,9,1,k,1,1,1,9,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,o,9,1,1,1,1],\r\n            [t,0,1,9,1,n,1,1,1,1,l,1,r,1,1,0,1,1,9,1,1,1,1,1,9,1,1,1,1,1],\r\n            [1,0,1,1,1,1,1,1,p,1,1,1,s,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],\r\n            [1,0,t,9,1,s,1,1,1,1,1,1,1,p,1,9,1,m,1,1,n,1,1,1,1,1,1,1,0,1],\r\n            [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],\r\n            [1,1,t,s,1,1,1,n,1,1,1,1,1,n,1,r,1,1,1,l,1,1,n,1,1,1,1,1,1,1]\r\n           ]\r\n          ]\r\n\r\ndef textures(stage):\r\n    for a in range(15):\r\n        for b in range(30):\r\n            if Common_list.abv[stage-1][a][b] == 1:\r\n                i = grass_surf.get_rect(center=(20 + (b * 40), (a * 40) + 20))\r\n                screen.blit(grass_surf, i)\r\n            elif Common_list.abv[stage-1][a][b] == 9:\r\n                i = grass1_surf.get_rect(center=(20 + (b * 40), (a * 40) + 20))\r\n                screen.blit(grass1_surf, i)\r\n            elif Common_list.abv[stage-1][a][b] == 0:\r\n                i = road_surf.get_rect(center=(20 + (b * 40), (a * 40) + 20))\r\n                screen.blit(road_surf, i)\r\n            elif Common_list.abv[stage-1][a][b] == 3:\r\n                i = ss1_surf.get_rect(center=(20 + (b * 40), (a * 40) + 20))\r\n                screen.blit(ss1_surf, i)\r\n            elif Common_list.abv[stage-1][a][b] == 4:\r\n                i = ss2_surf.get_rect(center=(20 + (b * 40), (a * 40) + 20))\r\n                screen.blit(ss2_surf, i)\r\n            elif Common_list.abv[stage-1][a][b] == 5:\r\n                i = ss3_surf.get_rect(center=(20 + (b * 40), (a * 40) + 20))\r\n                screen.blit(ss3_surf, i)\r\n            elif Common_list.abv[stage - 1][a][b] == 6:\r\n                i = ss4_surf.get_rect(center=(20 + (b * 40), (a * 40) + 20))\r\n                screen.blit(ss4_surf, i)\r\n            elif Common_list.abv[stage - 1][a][b] == 7:\r\n                i = stone_surf.get_rect(center=(0 + (b * 40), (a * 40) + 0))\r\n                screen.blit(stone_surf, i)\r\n            elif Common_list.abv[stage - 1][a][b] == 8:\r\n                i = lake_surf.get_rect(center=(0 + (b * 40), (a * 40) + 0))\r\n                screen.blit(lake_surf, i)\r\n\r\ndef draw_clouds(stage):\r\n    for a in range(15):\r\n        for b in range(30):\r\n            if Common_list.abv[stage-1][a][b] == 2:\r\n                i = cloud_surf.get_rect(center=(20 + (b * 40), (a * 40) + 20))\r\n                screen.blit(cloud_surf, i)\r\n\t\t\t\t\r\n\r\ndef draw_bullet(x, y):\r\n\tpygame.draw.circle(screen, BLACK, (x, y), 1)\r\n\r\ndef draw_tower(x, y, z):\r\n    if z == 1:\r\n        i = tower_surf_1.get_rect(center=(x, y))\r\n        screen.blit(tower_surf_1, i)\r\n    if z == 2:\r\n        i = tower_surf_2.get_rect(center=(x, y))\r\n        screen.blit(tower_surf_2, i)\r\n    if z == 3:\r\n        i = tower_surf_3.get_rect(center=(x, y))\r\n        screen.blit(tower_surf_3, i)\r\n\r\ndef draw_enemy(enemy, time):\r\n    change = time - enemy.time_creation\r\n    if enemy.tik == 0:\r\n        enemy.tik = 4\r\n    if change//40 == change/40:\r\n        enemy.tik -= 1\r\n    if enemy.tik == 4:\r\n        i = enemy1_surf.get_rect(center=( (enemy.x), (enemy.y) ))\r\n        screen.blit(enemy1_surf, i)\r\n    if enemy.tik == 3:\r\n        i = enemy2_surf.get_rect(center=(  (enemy.x), (enemy.y)  ))\r\n        screen.blit(enemy2_surf, i)\r\n    if enemy.tik == 2:\r\n        i = enemy3_surf.get_rect(center=(  (enemy.x), (enemy.y)  ))\r\n        screen.blit(enemy3_surf, i)\r\n    if enemy.tik == 1:\r\n        i = enemy4_surf.get_rect(center=((enemy.x), (enemy.y)))\r\n        screen.blit(enemy4_surf, i)\r\n    if enemy.hp < 50:\r\n        i = dmg_surf.get_rect(center=(  (enemy.x), (enemy.y)  ))\r\n        screen.blit(dmg_surf, i)\r\ndef draw_enemy1(enemy, time):\r\n    change = time - enemy.time_creation\r\n    i = prb_surf.get_rect(center=((enemy.x), (enemy.y)))\r\n    screen.blit(prb_surf, i)\r\ndef draw_enemy3(enemy, time):\r\n    change = time - enemy.time_creation\r\n    i = cloud_surf.get_rect(center=((enemy.x), (enemy.y)))\r\n    screen.blit(cloud_surf, i)\r\n\r\n\r\ndef draw_fort(fort):\r\n    i = fort_surf.get_rect(center=((860), (290)))\r\n    screen.blit(fort_surf, i)\r\n    pygame.draw.line(screen, (255, 0, 0), (810, 250), (810 + fort.hp//100, 250), 7)\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Textures.py b/Textures.py
--- a/Textures.py	(revision 7dd6cf86fcb8fb9bfd0bdf4329834c9e9df7b8a9)
+++ b/Textures.py	(date 1671119046684)
@@ -2,7 +2,12 @@
 from random import randint
 import numpy as np
 import Common_list
-
+e1u_surf = pygame.image.load("img/en1u.png")
+e1r_surf = pygame.image.load("img/en1r.png")
+e1l_surf = pygame.image.load("img/en1l.png")
+e2r_surf = pygame.image.load("img/en2r.png")
+e2l_surf = pygame.image.load("img/en2l.png")
+e2u_surf = pygame.image.load("img/en2u.png")
 grass_surf = pygame.image.load("img/t1gr.png")
 grass1_surf = pygame.image.load("img/t2gr.png")
 road_surf = pygame.image.load("img/t1ro.png")
@@ -20,6 +25,10 @@
 enemy2_surf = pygame.image.load("img/12.png")
 enemy3_surf = pygame.image.load("img/13.png")
 enemy4_surf = pygame.image.load("img/14.png")
+enemy41_surf = pygame.image.load("img/21.png")
+enemy42_surf = pygame.image.load("img/22.png")
+enemy43_surf = pygame.image.load("img/23.png")
+enemy44_surf = pygame.image.load("img/24.png")
 fort_surf = pygame.image.load("img/mom-tower-t.png")
 dmg_surf = pygame.image.load("img/dmg.png")
 prb_surf = pygame.image.load("img/prb.png")
@@ -50,21 +59,21 @@
     s = randint(3, 6)
     t = randint(3, 5)
     
-    Common_list.abv = [[[2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2],
-            [2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2],
-            [2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2],
-            [2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2],
-            [2,2,2,2,2,2,2,2,1,1,r,1,1,1,1,0,1,1,1,1,1,1,1,2,2,2,2,2,2,2],
-            [2,2,2,2,2,2,2,2,9,0,0,0,0,0,0,0,9,1,1,k,1,1,1,2,2,2,2,2,2,2],
-            [2,2,2,2,2,2,2,2,1,0,l,9,1,1,1,1,k,1,1,1,1,1,1,2,2,2,2,2,2,2],
-            [2,2,2,2,2,2,2,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,2,2,2,2,2,2],
-            [2,2,2,2,2,2,2,2,1,0,9,1,1,m,1,1,1,1,1,k,1,1,l,2,2,2,2,2,2,2],
-            [2,2,2,2,2,2,2,2,9,0,0,0,0,0,0,0,1,1,1,1,1,1,1,2,2,2,2,2,2,2],
-            [2,2,2,2,2,2,2,2,1,1,l,1,r,1,1,0,1,1,9,1,1,1,1,2,2,2,2,2,2,2],
-            [2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2],
-            [2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2],
-            [2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2],
-            [2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2]
+    Common_list.abv = [[[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
+            [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
+            [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
+            [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
+            [1,1,1,1,1,1,1,1,1,1,r,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
+            [1,1,1,1,1,1,1,1,9,0,0,0,0,0,0,0,9,1,1,k,1,1,1,1,1,1,1,1,1,1],
+            [1,1,1,1,1,1,1,1,1,0,l,9,1,1,1,1,k,1,1,1,1,1,1,1,1,1,1,1,1,1],
+            [1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1],
+            [1,1,1,1,1,1,1,1,1,0,9,1,1,m,1,1,1,1,1,k,1,1,l,1,1,1,1,1,1,1],
+            [1,1,1,1,1,1,1,1,9,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
+            [1,1,1,1,1,1,1,1,1,1,l,1,r,1,1,0,1,1,9,1,1,1,1,1,1,1,1,1,1,1],
+            [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
+            [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
+            [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
+            [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]
            ],
            [[2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2],
             [2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2],
@@ -171,13 +180,58 @@
     if enemy.tik == 1:
         i = enemy4_surf.get_rect(center=((enemy.x), (enemy.y)))
         screen.blit(enemy4_surf, i)
+    if enemy.hp < 50:
+        i = dmg_surf.get_rect(center=(  (enemy.x), (enemy.y)  ))
+        screen.blit(dmg_surf, i)
+def draw_enemy4(enemy, time):
+    change = time - enemy.time_creation
+    if enemy.tik == 0:
+        enemy.tik = 4
+    if change//40 == change/40:
+        enemy.tik -= 1
+    if enemy.tik == 4:
+        i = enemy41_surf.get_rect(center=( (enemy.x), (enemy.y) ))
+        screen.blit(enemy41_surf, i)
+    if enemy.tik == 3:
+        i = enemy42_surf.get_rect(center=(  (enemy.x), (enemy.y)  ))
+        screen.blit(enemy42_surf, i)
+    if enemy.tik == 2:
+        i = enemy43_surf.get_rect(center=(  (enemy.x), (enemy.y)  ))
+        screen.blit(enemy43_surf, i)
+    if enemy.tik == 1:
+        i = enemy44_surf.get_rect(center=((enemy.x), (enemy.y)))
+        screen.blit(enemy44_surf, i)
     if enemy.hp < 50:
         i = dmg_surf.get_rect(center=(  (enemy.x), (enemy.y)  ))
         screen.blit(dmg_surf, i)
 def draw_enemy1(enemy, time):
     change = time - enemy.time_creation
-    i = prb_surf.get_rect(center=((enemy.x), (enemy.y)))
-    screen.blit(prb_surf, i)
+    if enemy.tik == 0:
+        enemy.tik = 2
+    if change//40 == change/40:
+        enemy.tik -= 1
+    #i = prb_surf.get_rect(center=((enemy.x), (enemy.y)))
+    #screen.blit(prb_surf, i)
+    if enemy.tik == 2:
+        if enemy.axis == 'x' and enemy.speed < 0:
+            i = e1l_surf.get_rect(center=((enemy.x), (enemy.y)))
+            screen.blit(e1l_surf, i)
+        if enemy.axis == 'x' and enemy.speed > 0:
+            i = e1r_surf.get_rect(center=((enemy.x), (enemy.y)))
+            screen.blit(e1r_surf, i)
+        if enemy.axis == 'y':
+            i = e1u_surf.get_rect(center=((enemy.x), (enemy.y)))
+            screen.blit(e1u_surf, i)
+    if enemy.tik == 1:
+        if enemy.axis == 'x' and enemy.speed < 0:
+            i = e2l_surf.get_rect(center=((enemy.x), (enemy.y)))
+            screen.blit(e2l_surf, i)
+        if enemy.axis == 'x' and enemy.speed > 0:
+            i = e2r_surf.get_rect(center=((enemy.x), (enemy.y)))
+            screen.blit(e2r_surf, i)
+        if enemy.axis == 'y':
+            i = e2u_surf.get_rect(center=((enemy.x), (enemy.y)))
+            screen.blit(e2u_surf, i)
 def draw_enemy3(enemy, time):
     change = time - enemy.time_creation
     i = cloud_surf.get_rect(center=((enemy.x), (enemy.y)))
Index: Classes.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from math import *\r\nfrom Textures import *\r\nfrom Common_list import *\r\n\r\nSIDE = 40\r\nstart_positions = [[180, 420, 620], [140, 460, 1060], [220, 380, 0]]\r\n\r\ndef generate_road():\r\n    Common_list.is_free_for_tower = [[[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\r\n                          [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\r\n                          [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\r\n                          [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\r\n                          [0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,0,0,0,0,0,0],\r\n                          [0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,1,1,1,1,1,1,0,0,0,0,0,0,0],\r\n                          [0,0,0,0,0,0,0,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0],\r\n                          [0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0],\r\n                          [0,0,0,0,0,0,0,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0],\r\n                          [0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,1,1,1,1,1,1,0,0,0,0,0,0,0],\r\n                          [0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,0,0,0,0,0,0],\r\n                          [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\r\n                          [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\r\n                          [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\r\n                          [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]\r\n                         ],\r\n                         [[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\r\n                          [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\r\n                          [0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0],\r\n                          [0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\r\n                          [0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0],\r\n                          [0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0],\r\n                          [0,0,0,0,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0],\r\n                          [0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0],\r\n                          [0,0,0,0,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0],\r\n                          [0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0],\r\n                          [0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0],\r\n                          [0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\r\n                          [0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0],\r\n                          [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\r\n                          [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]\r\n                         ],\r\n                         [[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],\r\n                          [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],\r\n                          [1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1],\r\n                          [1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],\r\n                          [1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1],\r\n                          [0,0,1,1,1,1,1,1,1,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1],\r\n                          [1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],\r\n                          [1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1],\r\n                          [1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],\r\n                          [0,0,1,1,1,1,1,1,1,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1],\r\n                          [1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1],\r\n                          [1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],\r\n                          [1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1],\r\n                          [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],\r\n                          [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]\r\n                         ]\r\n                        ]\r\n\r\nclass Bullet:\r\n    def __init__(self, x, y, vx, vy, dmg):\r\n        self.x = x\r\n        self.y = y\r\n        self.vx = vx\r\n        self.vy = vy\r\n        self.dmg = dmg\r\n        self.live = 1\r\n\t\r\n    def draw_and_move(self):\r\n        draw_bullet(self.x, self.y)\r\n        self.x += self.vx\r\n        self.y += self.vy\r\n        if self.x < 0 or self.x > WIDTH or self.y < 0 or self.y > HEIGHT:\r\n            Common_list.bullets.remove(self)\r\n        \r\n    def hit_enemies(self, money):\r\n        for enemy in Common_list.enemies:\r\n            if (enemy.x-self.x)**2 + (enemy.y-self.y)**2 <= enemy.radius**2:\r\n                money = enemy.hit(self.dmg, money)\r\n                Common_list.bullets.remove(self)\r\n                break\r\n        return money\r\n                \r\n\t\r\n\r\nclass Tower1:\r\n    \"\"\"Класс первой башни (с дискретными снарядами)\"\"\"\r\n    def __init__(self, screen, stage, x_square, y_square):\r\n        self.x_square = x_square\r\n        self.y_square = y_square\r\n        self.x = self.x_square * SIDE + SIDE // 2\r\n        self.y = self.y_square * SIDE + SIDE // 2\r\n        if Common_list.is_free_for_tower[stage-1][self.y_square][self.x_square] != 1:\r\n            self.x = None\r\n            self.y = None\r\n        else:\r\n            Common_list.is_free_for_tower[stage-1][self.y_square][self.x_square] = 2 + len(Common_list.towers)\r\n        self.screen = screen\r\n        self.dmg = 50\r\n        # Урон пушки\r\n        self.speed = 30\r\n        # Скорострельность\r\n        self.angle = 0\r\n        # Угол поворота\r\n        self.radius = 200\r\n        # Дальнобойность\r\n        self.level = 1\r\n        # Уровень башни (максимум 3)\r\n        self.price = 100\r\n        # Стоимость башни в у.е.\r\n        self.upgrade_price = [20, 30, 40]\r\n        # Стоимость улучшения башни (меняется в процессе (локальной) прогрессии)\r\n        self.image = np.array([])\r\n        # Переменная, хранящая изображение башни\r\n        self.attacked_enemy = None\r\n        # Переменная, хранящая атакованного врага\r\n        self.t = self.speed\r\n\r\n    def shoot(self):\r\n        \"\"\" Функция выстрела по врагу\r\n        enemies - список активных врагов на карте\"\"\"\r\n        if self.attacked_enemy:\r\n            if ((self.attacked_enemy.x - self.x) ** 2 + (self.attacked_enemy.y - self.y) ** 2) > self.radius ** 2 \\\r\n                    or self.attacked_enemy.hp <= 0:\r\n                self.attacked_enemy = None\r\n                self.shoot()\r\n            else:\r\n                self.angle = atan2(self.attacked_enemy.y - self.y, self.attacked_enemy.x - self.x)\r\n                vx = BULLET_SPEED * cos(self.angle)\r\n                vy = BULLET_SPEED * sin(self.angle)\r\n                if self.attacked_enemy.axis == 'x':\r\n                    vx += self.attacked_enemy.speed\r\n                else:\r\n                    vy += self.attacked_enemy.speed\r\n                bullet = Bullet(self.x, self.y, vx, vy, self.dmg)\r\n                Common_list.bullets.append(bullet)\r\n        else:\r\n            min_distance = self.radius\r\n            for enemy in Common_list.enemies:\r\n                enemy_distance = np.sqrt((enemy.x - self.x) ** 2 + (enemy.y - self.y) ** 2)\r\n                if enemy_distance <= min_distance:\r\n                    min_distance = enemy_distance\r\n                    self.attacked_enemy = enemy\r\n            if self.attacked_enemy:\r\n                self.shoot()\r\n\r\n    def upgrade(self):\r\n        \"\"\"Если уровень не максимальный и достаточно денег, улучшает башню\"\"\"\r\n        self.level += 1\r\n        self.dmg += 10\r\n        self.speed -= 10\r\n        self.t = self.speed\r\n        self.radius += 20\r\n\r\n    def draw(self):\r\n        \"\"\"Рисует башню (тут должна использоваться переменная self.image, но рисунков пока нет((((,\r\n        поэтому рисует круг с дулом)\"\"\"\r\n        pygame.draw.line(self.screen, (0, 0, 0), (self.x, self.y),\r\n                         (self.x + 20 * cos(self.angle), self.y + 20 * sin(self.angle)), 2)\r\n        draw_tower(self.x, self.y, self.level)\r\n\r\n    def sell(self, stage):\r\n        \"\"\"Функция продажи башни\"\"\"\r\n        for tower_index in range(len(Common_list.towers)):\r\n            if tower_index > Common_list.is_free_for_tower[stage-1][self.y_square][self.x_square] - 2:\r\n                Common_list.is_free_for_tower[stage-1][Common_list.towers[tower_index].y_square][Common_list.towers[tower_index].x_square] -= 1\r\n        Common_list.is_free_for_tower[stage-1][self.y_square][self.x_square] = 1\r\n        Common_list.towers.remove(self)\r\n\r\nclass Tower2:\r\n    \"\"\"Класс второй башни (с дискретными снарядами)\"\"\"\r\n    def __init__(self, screen, stage, x_square, y_square):\r\n        self.x_square = x_square\r\n        self.y_square = y_square\r\n        self.x = self.x_square * SIDE + SIDE // 2\r\n        self.y = self.y_square * SIDE + SIDE // 2\r\n        if Common_list.is_free_for_tower[stage-1][self.y_square][self.x_square] != 1:\r\n            self.x = None\r\n            self.y = None\r\n        else:\r\n            Common_list.is_free_for_tower[stage-1][self.y_square][self.x_square] = 2 + len(Common_list.towers)\r\n        self.screen = screen\r\n        self.dmg = 50\r\n        # Урон пушки\r\n        self.speed = 30\r\n        # Скорострельность\r\n        self.angle = 0\r\n        # Угол поворота\r\n        self.radius = 200\r\n        # Дальнобойность\r\n        self.level = 1\r\n        # Уровень башни (максимум 3)\r\n        self.price = 100\r\n        # Стоимость башни в у.е.\r\n        self.upgrade_price = [20, 30, 40]\r\n        # Стоимость улучшения башни (меняется в процессе (локальной) прогрессии)\r\n        self.image = np.array([])\r\n        # Переменная, хранящая изображение башни\r\n        self.attacked_enemy = None\r\n        # Переменная, хранящая атакованного врага\r\n        self.t = self.speed\r\n\r\n    def shoot(self):\r\n        \"\"\" Функция выстрела по врагу\r\n        enemies - список активных врагов на карте\"\"\"\r\n        if self.attacked_enemy:\r\n            if ((self.attacked_enemy.x - self.x) ** 2 + (self.attacked_enemy.y - self.y) ** 2) > self.radius ** 2 \\\r\n                    or self.attacked_enemy.hp <= 0:\r\n                self.attacked_enemy = None\r\n                self.shoot()\r\n            else:\r\n                self.angle = atan2(self.attacked_enemy.y - self.y, self.attacked_enemy.x - self.x)\r\n                vx = BULLET_SPEED * cos(self.angle)\r\n                vy = BULLET_SPEED * sin(self.angle)\r\n                if self.attacked_enemy.axis == 'x':\r\n                    vx += self.attacked_enemy.speed\r\n                else:\r\n                    vy += self.attacked_enemy.speed\r\n                bullet = Bullet(self.x, self.y, vx, vy, self.dmg)\r\n                Common_list.bullets.append(bullet)\r\n        else:\r\n            min_distance = self.radius\r\n            for enemy in Common_list.enemies:\r\n                enemy_distance = np.sqrt((enemy.x - self.x) ** 2 + (enemy.y - self.y) ** 2)\r\n                if enemy_distance <= min_distance:\r\n                    min_distance = enemy_distance\r\n                    self.attacked_enemy = enemy\r\n            if self.attacked_enemy:\r\n                self.shoot()\r\n\r\n    def upgrade(self):\r\n        \"\"\"Если уровень не максимальный и достаточно денег, улучшает башню\"\"\"\r\n        self.level += 1\r\n        self.dmg += 10\r\n        self.speed -= 10\r\n        self.t = self.speed\r\n        self.radius += 20\r\n\r\n    def draw(self):\r\n        \"\"\"Рисует башню (тут должна использоваться переменная self.image, но рисунков пока нет((((,\r\n        поэтому рисует круг с дулом)\"\"\"\r\n        pygame.draw.line(self.screen, (0, 0, 0), (self.x, self.y),\r\n                         (self.x + 20 * cos(self.angle), self.y + 20 * sin(self.angle)), 2)\r\n        draw_tower(self.x, self.y, self.level)\r\n\r\n    def sell(self, stage):\r\n        \"\"\"Функция продажи башни\"\"\"\r\n        for tower_index in range(len(Common_list.towers)):\r\n            if tower_index > Common_list.is_free_for_tower[stage-1][self.y_square][self.x_square] - 2:\r\n                Common_list.is_free_for_tower[stage-1][Common_list.towers[tower_index].y_square][Common_list.towers[tower_index].x_square] -= 1\r\n        Common_list.is_free_for_tower[stage-1][self.y_square][self.x_square] = 1\r\n        Common_list.towers.remove(self)\r\n\r\nclass Enemy1:\r\n    \"\"\"Класс, описывающий превый тип врага\"\"\"\r\n    def __init__(self, screen, x, y, time_creation):\r\n        self.time_creation = time_creation\r\n        self.screen = screen\r\n        self.x = x\r\n        self.y = y\r\n        self.type = 1\r\n        self.tik = 4\r\n        self.speed = 2\r\n        # Скорость юнита\r\n        self.axis = 'x'\r\n        #Ось движения юнита\r\n        self.dmg = 10\r\n        # Урон юнита по главной постройке\r\n        self.hp = 200\r\n        # Здоровье юнита\r\n        self.reward = 30\r\n        # Вознаграждение за убийство юнита\r\n        self.image = np.array([])\r\n        # Изображение юнита\r\n        self.radius = 10\r\n        # Временная (!!!!!) переменная, отвечающая за размер врага\r\n\r\n\r\n    def hit(self, tower_damage, money):\r\n        \"\"\"Функция, отвечающая за боль и страдания юнита\"\"\"\r\n        self.hp -= tower_damage\r\n        if self.hp <= 0:\r\n            money += self.reward\r\n            Common_list.enemies.remove(self)\r\n        return money\r\n\r\n    def move(self, stage):\r\n        \"\"\"Функция, двигающаяя юнита\"\"\"\r\n        if self.axis == 'x' and Common_list.abv[stage-1][self.y // SIDE][(self.x+np.sign(self.speed)*(SIDE//2+1)) // SIDE] != 0:\r\n            self.axis = 'y'\r\n            self.x = (self.x//SIDE) * SIDE + SIDE // 2\r\n            if Common_list.abv[stage-1][(self.y+np.sign(self.speed)*(SIDE//2+1)) // SIDE][self.x // SIDE] != 0:\r\n                self.speed = -self.speed\r\n        elif self.axis == 'y' and (Common_list.abv[stage-1][(self.y+np.sign(self.speed)*(SIDE//2+1)) // SIDE][self.x // SIDE] != 0 or abs(self.y - 300) <= abs(self.speed) / 2):\r\n            self.axis = 'x'\r\n            self.y = (self.y//SIDE) * SIDE + SIDE // 2\r\n            if Common_list.abv[stage-1][self.y // SIDE][(self.x+np.sign(self.speed)*(SIDE//2+1)) // SIDE] != 0:\r\n                self.speed = -self.speed\r\n        if self.axis == 'x':\r\n            self.x += self.speed\r\n        else:\r\n            self.y += self.speed\r\n        if self.y == 300 and self.x >= 840:\r\n            self.x = 840\r\n\r\n    def attack(self, fortress):\r\n        fortress.hp -= self.dmg\r\n\r\n    def draw(self, time):\r\n        draw_enemy(self, time)\r\n\r\n\r\nclass Enemy2(Enemy1):\r\n    \"\"\"Класс, описывающий 2 тип врага\"\"\"\r\n    def __init__(self, screen, x, y, time_creation):\r\n        super().__init__(screen, x, y, time_creation)\r\n        self.hp = 2800\r\n        self.reward = 50\r\n\r\n    def draw(self, time):\r\n        draw_enemy1(self, time)\r\n\r\nclass Fortress:\r\n    \"\"\"Класс описывающий главное здание\"\"\"\r\n    def __init__(self, screen):\r\n        self.screen = screen\r\n        self.x = 860\r\n        self.y = 300\r\n        self.hp = 10000\r\n        self.is_alive = True\r\n\r\n    def hit(self):\r\n        \"\"\"Функция, отвечающая за повреждения главного здания\"\"\"\r\n        for enemy in Common_list.enemies:\r\n            enemy_distance = np.sqrt((self.x - enemy.x) ** 2 + (self.y - enemy.y) ** 2)\r\n            if enemy_distance == 20:\r\n                enemy.attack(self)\r\n                if self.hp <= 0:\r\n                    self.is_alive = False\r\n\r\n    def alive_or_not(self):\r\n        \"\"\"Функция, отвечающая на вопрос: \"проиграл ли игрок?\" \"\"\"\r\n        return self.is_alive\r\n\r\n    def draw(self):\r\n        draw_fort(self)\r\n        \r\nclass MainBack:\r\n    def __init__(self):\r\n        self.angle = 0\r\n        self.main_back_surface = pygame.transform.scale(main_back_surface, (main_back_surface.get_width() // 0.5,\\\r\n                                                     main_back_surface.get_height() // 0.5))\r\n\r\n    def draw(self):\r\n        screen.fill(WHITE)\r\n        screen.blit(self.main_back_surface, (-250 + 200*cos(self.angle), -150 + 100*sin(self.angle)))\r\n        self.angle += 0.007 + 0.002 * cos(self.angle/pi)\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Classes.py b/Classes.py
--- a/Classes.py	(revision 7dd6cf86fcb8fb9bfd0bdf4329834c9e9df7b8a9)
+++ b/Classes.py	(date 1671119096750)
@@ -3,7 +3,7 @@
 from Common_list import *
 
 SIDE = 40
-start_positions = [[180, 420, 620], [140, 460, 1060], [220, 380, 0]]
+start_positions = [[0, 560, 620], [220, 380, 0], [220, 380, 0]]
 
 def generate_road():
     Common_list.is_free_for_tower = [[[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
@@ -259,7 +259,7 @@
         self.y = y
         self.type = 1
         self.tik = 4
-        self.speed = 2
+        self.speed = 1
         # Скорость юнита
         self.axis = 'x'
         #Ось движения юнита
@@ -313,12 +313,26 @@
     """Класс, описывающий 2 тип врага"""
     def __init__(self, screen, x, y, time_creation):
         super().__init__(screen, x, y, time_creation)
-        self.hp = 2800
+        self.hp = 50
         self.reward = 50
+        self.tik = 2
+        self.speed = 4
 
     def draw(self, time):
         draw_enemy1(self, time)
 
+class Enemy4(Enemy1):
+    """Класс, описывающий 2 тип врага"""
+    def __init__(self, screen, x, y, time_creation):
+        super().__init__(screen, x, y, time_creation)
+        self.hp = 200
+        self.reward = 50
+        self.tik = 4
+        self.speed = 1
+
+    def draw(self, time):
+        draw_enemy4(self, time)
+
 class Fortress:
     """Класс описывающий главное здание"""
     def __init__(self, screen):
Index: Game_process.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import random as rnd\r\nfrom Textures import *\r\nfrom Buttons import *\r\nfrom Classes import *\r\nfrom Main_menu import *\r\nfrom Common_list import *\r\n\r\ndef game_process(text_font, stage, clock, FPS):\r\n    finished = False\r\n    loose = False\r\n    fortress = Fortress(screen)\r\n    Common_list.buttons = [QuitButton(screen, 1100, 0, text_font)]\r\n    Common_list.enemies = []\r\n    Common_list.towers = []\r\n    Common_list.bullets = []\r\n    money = 200\r\n    time = 0\r\n    Delta_t = 1\r\n    x_square_light = -1\r\n    y_square_light = -1\r\n    active_tower = None\r\n    flag_build = False\r\n    flag_tower = False\r\n    play_menu_text_surface = pygame.font.SysFont('Comic Sans MS', 30, True)\r\n    text = \"\"\r\n    generate_textures()\r\n    generate_road()\r\n\r\n    while not finished:\r\n        screen.fill(WHITE)\r\n        textures(stage)\r\n        clock.tick(FPS)\r\n    \r\n        for event in pygame.event.get():\r\n            if event.type == pygame.MOUSEBUTTONDOWN:\r\n                erase_useless_buttons()\r\n                for button in Common_list.buttons:\r\n                    if button.is_pressed(event):\r\n                        if button.type == \"quit_button\":\r\n                            finished = True\r\n                if event.button == 1 or event.button == 3:\r\n                    erase_useless_buttons()\r\n                    if event.pos[1] < 600:\r\n                        active_tower = None\r\n                        x_square_light = event.pos[0] // SIDE\r\n                        y_square_light = event.pos[1] // SIDE\r\n                        if Common_list.is_free_for_tower[stage-1][y_square_light][x_square_light] == 0 or Common_list.abv[stage-1][y_square_light][x_square_light] == 3 or\\\r\n                           {Common_list.abv[stage-1][y_square_light][x_square_light],\\\r\n                            Common_list.abv[stage-1][min(14, y_square_light+1)][x_square_light],\\\r\n                            Common_list.abv[stage-1][min(14, y_square_light+1)][min(29, x_square_light+1)],\\\r\n                            Common_list.abv[stage-1][y_square_light][min(29, x_square_light+1)]}.intersection({7,8}) != set():\r\n                            flag_build = False\r\n                            flag_tower = False\r\n                            text = \"You can't build tower there\"\r\n                        elif Common_list.is_free_for_tower[stage-1][y_square_light][x_square_light] == 1:\r\n                            flag_build = True\r\n                            flag_tower = False\r\n                            text = \"You can build tower there\"\r\n                            Common_list.buttons.append(BuildButton(screen, 600, 650, play_menu_text_surface))\r\n                        else:\r\n                            flag_build = False\r\n                            flag_tower = True\r\n                            active_tower = Common_list.towers[Common_list.is_free_for_tower[stage-1][y_square_light][x_square_light] - 2]\r\n                            text = \"There is tower LVL \" + \\\r\n                                   str(active_tower.level)\r\n                            Common_list.buttons.append(UpgradeButton(screen, 600, 650, play_menu_text_surface))\r\n                            Common_list.buttons.append(SellButton(screen, 900, 650, play_menu_text_surface))\r\n                    else:\r\n                        if flag_build:\r\n                            Common_list.buttons.append(BuildButton(screen, 600, 650, play_menu_text_surface))\r\n                        elif flag_tower:\r\n                            Common_list.buttons.append(UpgradeButton(screen, 600, 650, play_menu_text_surface))\r\n                            Common_list.buttons.append(SellButton(screen, 900, 650, play_menu_text_surface))\r\n                        for button in Common_list.buttons:\r\n                            if button.is_pressed(event):\r\n                                if button.type == \"upgrade_button\":\r\n                                    twr = Common_list.towers[Common_list.is_free_for_tower[stage-1][y_square_light][x_square_light] - 2]\r\n                                    money, text = button.upgrade_initiation(twr, money)\r\n                                if button.type == \"sell_button\":\r\n                                    twr = Common_list.towers[Common_list.is_free_for_tower[stage-1][y_square_light][x_square_light] - 2]\r\n                                    money += twr.price / 2\r\n                                    while twr.level > 1:\r\n                                        money += twr.upgrade_price[twr.level - 1] / 2\r\n                                        twr.level -= 1\r\n                                    twr.sell(stage)\r\n                                    text = \"You can build tower there\"\r\n                                    erase_useless_buttons()\r\n                                    Common_list.buttons.remove(button)\r\n                                    Common_list.buttons.append(BuildButton(screen, 600, 650, play_menu_text_surface))\r\n                                if button.type == \"build_button\":\r\n                                    money, text, active_tower = button.build_initiation(money, screen, x_square_light,\r\n                                                                          y_square_light, button,\r\n                                                                          play_menu_text_surface, stage, active_tower)\r\n\r\n            elif event.type == pygame.KEYDOWN:\r\n                if event.key == pygame.K_ESCAPE:\r\n                    finished = True\r\n                elif event.key == pygame.K_z:\r\n                    for button in Common_list.buttons:\r\n                        if button.type == \"upgrade_button\":\r\n                            if Common_list.is_free_for_tower[stage-1][y_square_light][x_square_light] > 1:\r\n                                twr = Common_list.towers[Common_list.is_free_for_tower[stage-1][y_square_light][x_square_light] - 2]\r\n                                money, text = button.upgrade_initiation(twr, money)\r\n                        if button.type == \"build_button\":\r\n                            money, text, active_tower = button.build_initiation(money, screen, x_square_light, y_square_light,\r\n                                                            button, play_menu_text_surface, stage, active_tower)\r\n                elif event.key == pygame.K_x:\r\n                    for button in Common_list.buttons:\r\n                        if button.type == \"sell_button\":\r\n                            twr = Common_list.towers[Common_list.is_free_for_tower[stage-1][y_square_light][x_square_light] - 2]\r\n                            money += twr.price / 2\r\n                            while twr.level > 1:\r\n                                money += twr.upgrade_price[twr.level - 1] / 2\r\n                                twr.level -= 1\r\n                            twr.sell(stage)\r\n                            text = \"You can build tower there\"\r\n                            erase_useless_buttons()\r\n                            Common_list.buttons.remove(button)\r\n                            Common_list.buttons.append(BuildButton(screen, 600, 650, play_menu_text_surface))\r\n\r\n            elif event.type == pygame.QUIT:\r\n                finished = True\r\n\r\n        if x_square_light != -1:\r\n            pygame.draw.polygon(screen, GREEN, ((x_square_light*SIDE, y_square_light*SIDE),\r\n                                                (x_square_light*SIDE + SIDE, y_square_light*SIDE),\r\n                                                (x_square_light*SIDE + SIDE, y_square_light*SIDE + SIDE),\r\n                                                (x_square_light*SIDE, y_square_light*SIDE + SIDE)), 1)\r\n        random_number = rnd.randint(1, 100)\r\n        if random_number == 1:\r\n            enemy = Enemy1(screen, start_positions[stage - 1][2], start_positions[stage - 1][0], time)\r\n            Common_list.enemies.append(enemy)\r\n        elif random_number == 100:\r\n            enemy = Enemy1(screen, start_positions[stage - 1][2], start_positions[stage - 1][1], time)\r\n            Common_list.enemies.append(enemy)\r\n\r\n        random_number = rnd.randint(1, 1000)\r\n        if random_number == 1:\r\n            enemy = Enemy2(screen, start_positions[stage - 1][2], start_positions[stage - 1][0], time)\r\n            Common_list.enemies.append(enemy)\r\n        elif random_number == 100:\r\n            enemy = Enemy2(screen, start_positions[stage - 1][2], start_positions[stage - 1][1], time)\r\n            Common_list.enemies.append(enemy)\r\n        for enemy in Common_list.enemies:\r\n            enemy.move(stage)\r\n            enemy.draw(time)\r\n\r\n        for tower in Common_list.towers:\r\n            tower.draw()\r\n            if tower.t <= 0:\r\n                tower.shoot()\r\n                if tower.attacked_enemy:\r\n                    tower.t = tower.speed\r\n            tower.t -= 1\r\n        if active_tower:\r\n            pygame.draw.circle(screen, GREEN, (active_tower.x, active_tower.y), active_tower.radius, 3)\r\n        for bullet in Common_list.bullets:\r\n            bullet.draw_and_move()\r\n            money = bullet.hit_enemies(money)\r\n        fortress.hit()\r\n        if not fortress.alive_or_not():\r\n            finished = True\r\n            loose = True\r\n        time += Delta_t\r\n        screen.blit(play_menu_surface, play_menu_rect)\r\n        screen.blit(play_menu_text_surface.render(text, True, BLACK), (100, 675))\r\n        draw_clouds(stage)\r\n        for button in Common_list.buttons:\r\n            button.draw()\r\n        fortress.draw()\r\n        screen.blit(text_font.render(\"Money \" + str(int(money)), True, (0, 0, 0)), (10, 10))\r\n        screen.blit(text_font.render(\"FPS: \" + str(int(clock.get_fps())), True, (0, 0, 0)), (500, 10))\r\n        pygame.display.update()\r\n    return finished, loose\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Game_process.py b/Game_process.py
--- a/Game_process.py	(revision 7dd6cf86fcb8fb9bfd0bdf4329834c9e9df7b8a9)
+++ b/Game_process.py	(date 1671119132865)
@@ -134,6 +134,14 @@
             enemy = Enemy1(screen, start_positions[stage - 1][2], start_positions[stage - 1][1], time)
             Common_list.enemies.append(enemy)
 
+        random_number = rnd.randint(1, 200)
+        if random_number == 1:
+            enemy = Enemy4(screen, start_positions[stage - 1][2], start_positions[stage - 1][0], time)
+            Common_list.enemies.append(enemy)
+        elif random_number == 200:
+            enemy = Enemy4(screen, start_positions[stage - 1][2], start_positions[stage - 1][1], time)
+            Common_list.enemies.append(enemy)
+
         random_number = rnd.randint(1, 1000)
         if random_number == 1:
             enemy = Enemy2(screen, start_positions[stage - 1][2], start_positions[stage - 1][0], time)
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"b335f9ad-e810-4b10-9557-e0b214f25eda\" name=\"Changes\" comment=\"Теперь при нажатии на кнопку quit игрока выбрасывает в главное меню, сделан экран &quot;game over&quot; с возможностью выйти в главное меню или выйти из игры после поражения\">\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/Main_menu.py\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/Main_menu.py\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/Textures.py\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/Textures.py\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/main.py\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/main.py\" afterDir=\"false\" />\r\n    </list>\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"FileTemplateManagerImpl\">\r\n    <option name=\"RECENT_TEMPLATES\">\r\n      <list>\r\n        <option value=\"Python Script\" />\r\n      </list>\r\n    </option>\r\n  </component>\r\n  <component name=\"Git.Settings\">\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\r\n  </component>\r\n  <component name=\"MarkdownSettingsMigration\">\r\n    <option name=\"stateVersion\" value=\"1\" />\r\n  </component>\r\n  <component name=\"ProjectId\" id=\"2IKEwcYEGPyJEKyqhMOzN3a8CtR\" />\r\n  <component name=\"ProjectLevelVcsManager\">\r\n    <OptionsSetting value=\"false\" id=\"Update\" />\r\n  </component>\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\"><![CDATA[{\r\n  \"keyToString\": {\r\n    \"RunOnceActivity.OpenProjectViewOnStart\": \"true\",\r\n    \"RunOnceActivity.ShowReadmeOnStart\": \"true\",\r\n    \"last_opened_file_path\": \"C:/Users/mihko/PycharmProjects/ProgaQuantum\",\r\n    \"settings.editor.selected.configurable\": \"com.jetbrains.python.configuration.PyActiveSdkModuleConfigurable\"\r\n  }\r\n}]]></component>\r\n  <component name=\"RunManager\">\r\n    <configuration name=\"main\" type=\"PythonConfigurationType\" factoryName=\"Python\" nameIsGenerated=\"true\">\r\n      <module name=\"ProgaQuantum\" />\r\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\r\n      <option name=\"PARENT_ENVS\" value=\"true\" />\r\n      <envs>\r\n        <env name=\"PYTHONUNBUFFERED\" value=\"1\" />\r\n      </envs>\r\n      <option name=\"SDK_HOME\" value=\"C:\\Users\\mihko\\PycharmProjects\\pythonProject\\venv\\Scripts\\python.exe\" />\r\n      <option name=\"WORKING_DIRECTORY\" value=\"$PROJECT_DIR$\" />\r\n      <option name=\"IS_MODULE_SDK\" value=\"false\" />\r\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\r\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\r\n      <option name=\"SCRIPT_NAME\" value=\"$PROJECT_DIR$/main.py\" />\r\n      <option name=\"PARAMETERS\" value=\"\" />\r\n      <option name=\"SHOW_COMMAND_LINE\" value=\"false\" />\r\n      <option name=\"EMULATE_TERMINAL\" value=\"false\" />\r\n      <option name=\"MODULE_MODE\" value=\"false\" />\r\n      <option name=\"REDIRECT_INPUT\" value=\"false\" />\r\n      <option name=\"INPUT_FILE\" value=\"\" />\r\n      <method v=\"2\" />\r\n    </configuration>\r\n  </component>\r\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\r\n      <changelist id=\"b335f9ad-e810-4b10-9557-e0b214f25eda\" name=\"Changes\" comment=\"\" />\r\n      <created>1669922113170</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1669922113170</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00001\" summary=\"test\">\r\n      <created>1669922452656</created>\r\n      <option name=\"number\" value=\"00001\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00001\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1669922452656</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00002\" summary=\"Починил кнопку улучшения\">\r\n      <created>1669966502588</created>\r\n      <option name=\"number\" value=\"00002\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00002\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1669966502588</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00003\" summary=\"Реализованна продажа башен\">\r\n      <created>1669967463344</created>\r\n      <option name=\"number\" value=\"00003\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00003\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1669967463344</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00004\" summary=\"ААААА Я ВСЁЁЁ ПОЧИИНИИИЛ&#10;смена тестовых моделей врагов и башен при апгрейде\">\r\n      <created>1669971606735</created>\r\n      <option name=\"number\" value=\"00004\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00004\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1669971606735</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00005\" summary=\"Теперь программа смещает индексы при продаже башен и не случается list index out of range\">\r\n      <created>1669972030056</created>\r\n      <option name=\"number\" value=\"00005\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00005\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1669972030056</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00006\" summary=\"Осуществил постройку башен через кнопку в менюшке\">\r\n      <created>1669993980324</created>\r\n      <option name=\"number\" value=\"00006\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00006\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1669993980324</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00007\" summary=\"некоторые test модели и случайный ландшафт\">\r\n      <created>1670566121921</created>\r\n      <option name=\"number\" value=\"00007\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00007\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1670566121921</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00008\" summary=\"Теперь выбор уровня в меню действительно на что-то влияет\">\r\n      <created>1670602731136</created>\r\n      <option name=\"number\" value=\"00008\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00008\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1670602731136</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00009\" summary=\"Сделал второй тип врагов через наследование\">\r\n      <created>1670603128191</created>\r\n      <option name=\"number\" value=\"00009\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00009\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1670603128191</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00010\" summary=\"Одно малюсенькое исправление по классам, еоторое забыл в предыдущем коммите (буквально две строчки)\">\r\n      <created>1670603507511</created>\r\n      <option name=\"number\" value=\"00010\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00010\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1670603507511</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00011\" summary=\"Теперь меню не отображает кнопку запуска игры, если игрок не выбрал уровень, выбранный игроком уровень подсвечивается красным\">\r\n      <created>1670604528605</created>\r\n      <option name=\"number\" value=\"00011\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00011\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1670604528605</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00012\" summary=\"Теперь при нажатии на кнопку quit игрока выбрасывает в главное меню, сделан экран &quot;game over&quot; с возможностью выйти в главное меню или выйти из игры после поражения\">\r\n      <created>1670606245445</created>\r\n      <option name=\"number\" value=\"00012\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00012\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1670606245445</updated>\r\n    </task>\r\n    <option name=\"localTasksCounter\" value=\"13\" />\r\n    <servers />\r\n  </component>\r\n  <component name=\"Vcs.Log.Tabs.Properties\">\r\n    <option name=\"TAB_STATES\">\r\n      <map>\r\n        <entry key=\"MAIN\">\r\n          <value>\r\n            <State />\r\n          </value>\r\n        </entry>\r\n      </map>\r\n    </option>\r\n  </component>\r\n  <component name=\"VcsManagerConfiguration\">\r\n    <MESSAGE value=\"test\" />\r\n    <MESSAGE value=\"Починил кнопку улучшения\" />\r\n    <MESSAGE value=\"Реализованна продажа башен\" />\r\n    <MESSAGE value=\"ААААА Я ВСЁЁЁ ПОЧИИНИИИЛ&#10;смена тестовых моделей врагов и башен при апгрейде\" />\r\n    <MESSAGE value=\"Теперь программа смещает индексы при продаже башен и не случается list index out of range\" />\r\n    <MESSAGE value=\"Осуществил постройку башен через кнопку в менюшке\" />\r\n    <MESSAGE value=\"некоторые test модели и случайный ландшафт\" />\r\n    <MESSAGE value=\"Теперь выбор уровня в меню действительно на что-то влияет\" />\r\n    <MESSAGE value=\"Сделал второй тип врагов через наследование\" />\r\n    <MESSAGE value=\"Одно малюсенькое исправление по классам, еоторое забыл в предыдущем коммите (буквально две строчки)\" />\r\n    <MESSAGE value=\"Теперь меню не отображает кнопку запуска игры, если игрок не выбрал уровень, выбранный игроком уровень подсвечивается красным\" />\r\n    <MESSAGE value=\"Теперь при нажатии на кнопку quit игрока выбрасывает в главное меню, сделан экран &quot;game over&quot; с возможностью выйти в главное меню или выйти из игры после поражения\" />\r\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"Теперь при нажатии на кнопку quit игрока выбрасывает в главное меню, сделан экран &quot;game over&quot; с возможностью выйти в главное меню или выйти из игры после поражения\" />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision 7dd6cf86fcb8fb9bfd0bdf4329834c9e9df7b8a9)
+++ b/.idea/workspace.xml	(date 1671119047605)
@@ -2,10 +2,13 @@
 <project version="4">
   <component name="ChangeListManager">
     <list default="true" id="b335f9ad-e810-4b10-9557-e0b214f25eda" name="Changes" comment="Теперь при нажатии на кнопку quit игрока выбрасывает в главное меню, сделан экран &quot;game over&quot; с возможностью выйти в главное меню или выйти из игры после поражения">
+      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_02_12_2022_11_35__Changes_.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_02_12_2022_11_35__Changes_.xml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_09_12_2022_12_06__Changes_.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_09_12_2022_12_06__Changes_.xml" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/Main_menu.py" beforeDir="false" afterPath="$PROJECT_DIR$/Main_menu.py" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/Classes.py" beforeDir="false" afterPath="$PROJECT_DIR$/Classes.py" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/Game_process.py" beforeDir="false" afterPath="$PROJECT_DIR$/Game_process.py" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/Textures.py" beforeDir="false" afterPath="$PROJECT_DIR$/Textures.py" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/main.py" beforeDir="false" afterPath="$PROJECT_DIR$/main.py" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/img/13.png" beforeDir="false" afterPath="$PROJECT_DIR$/img/13.png" afterDir="false" />
     </list>
     <option name="SHOW_DIALOG" value="false" />
     <option name="HIGHLIGHT_CONFLICTS" value="true" />
@@ -33,14 +36,14 @@
     <option name="hideEmptyMiddlePackages" value="true" />
     <option name="showLibraryContents" value="true" />
   </component>
-  <component name="PropertiesComponent"><![CDATA[{
-  "keyToString": {
-    "RunOnceActivity.OpenProjectViewOnStart": "true",
-    "RunOnceActivity.ShowReadmeOnStart": "true",
-    "last_opened_file_path": "C:/Users/mihko/PycharmProjects/ProgaQuantum",
-    "settings.editor.selected.configurable": "com.jetbrains.python.configuration.PyActiveSdkModuleConfigurable"
+  <component name="PropertiesComponent">{
+  &quot;keyToString&quot;: {
+    &quot;RunOnceActivity.OpenProjectViewOnStart&quot;: &quot;true&quot;,
+    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,
+    &quot;last_opened_file_path&quot;: &quot;C:/Users/mihko/PycharmProjects/ProgaQuantum&quot;,
+    &quot;settings.editor.selected.configurable&quot;: &quot;com.jetbrains.python.configuration.PyActiveSdkModuleConfigurable&quot;
   }
-}]]></component>
+}</component>
   <component name="RunManager">
     <configuration name="main" type="PythonConfigurationType" factoryName="Python" nameIsGenerated="true">
       <module name="ProgaQuantum" />
@@ -49,9 +52,9 @@
       <envs>
         <env name="PYTHONUNBUFFERED" value="1" />
       </envs>
-      <option name="SDK_HOME" value="C:\Users\mihko\PycharmProjects\pythonProject\venv\Scripts\python.exe" />
+      <option name="SDK_HOME" value="" />
       <option name="WORKING_DIRECTORY" value="$PROJECT_DIR$" />
-      <option name="IS_MODULE_SDK" value="false" />
+      <option name="IS_MODULE_SDK" value="true" />
       <option name="ADD_CONTENT_ROOTS" value="true" />
       <option name="ADD_SOURCE_ROOTS" value="true" />
       <option name="SCRIPT_NAME" value="$PROJECT_DIR$/main.py" />
