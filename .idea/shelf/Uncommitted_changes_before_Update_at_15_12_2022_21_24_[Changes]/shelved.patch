Index: Textures.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import pygame\r\nfrom random import randint\r\nimport numpy as np\r\nimport Common_list\r\ne1u_surf = pygame.image.load(\"img/en1u.png\")\r\ne1r_surf = pygame.image.load(\"img/en1r.png\")\r\ne1l_surf = pygame.image.load(\"img/en1l.png\")\r\ne2r_surf = pygame.image.load(\"img/en2r.png\")\r\ne2l_surf = pygame.image.load(\"img/en2l.png\")\r\ne2u_surf = pygame.image.load(\"img/en2u.png\")\r\n\r\nbee_surf = pygame.image.load(\"img/bee.png\")\r\nbee1_surf = pygame.image.load(\"img/bee1.png\")\r\nbeeleft_surf = pygame.image.load(\"img/beeleft.png\")\r\nbeeleft1_surf = pygame.image.load(\"img/beeleft1.png\")\r\nbeeup_surf = pygame.image.load(\"img/beeup.png\")\r\nbeeup1_surf = pygame.image.load(\"img/beeup1.png\")\r\nbeedown_surf = pygame.image.load(\"img/beedown.png\")\r\nbeedown1_surf = pygame.image.load(\"img/beedown1.png\")\r\n\r\ngrass_surf = pygame.image.load(\"img/t1gr.png\")\r\ngrass1_surf = pygame.image.load(\"img/t2gr.png\")\r\nroad_surf = pygame.image.load(\"img/t1ro.png\")\r\ncloud_surf = pygame.image.load(\"img/cloud.png\")\r\nss1_surf = pygame.image.load(\"img/ss1.png\")\r\nss2_surf = pygame.image.load(\"img/ss2.png\")\r\nss3_surf = pygame.image.load(\"img/ss3.png\")\r\nss4_surf = pygame.image.load(\"img/ss4.png\")\r\ntower_surf_1 = pygame.image.load(\"img/tt1.png\")\r\ntower_surf_2 = pygame.image.load(\"img/tt2.png\")\r\ntower_surf_3 = pygame.image.load(\"img/tt3.png\")\r\nstone_surf = pygame.image.load(\"img/stone.png\")\r\nlake_surf = pygame.image.load(\"img/lake.png\")\r\nenemy1_surf = pygame.image.load(\"img/11.png\")\r\nenemy2_surf = pygame.image.load(\"img/12.png\")\r\nenemy3_surf = pygame.image.load(\"img/13.png\")\r\nenemy4_surf = pygame.image.load(\"img/14.png\")\r\nenemy41_surf = pygame.image.load(\"img/21.png\")\r\nenemy42_surf = pygame.image.load(\"img/22.png\")\r\nenemy43_surf = pygame.image.load(\"img/23.png\")\r\nenemy44_surf = pygame.image.load(\"img/24.png\")\r\nfort_surf = pygame.image.load(\"img/mom-tower-t.png\")\r\ndmg_surf = pygame.image.load(\"img/dmg.png\")\r\nprb_surf = pygame.image.load(\"img/prb.png\")\r\nmain_back_surface = pygame.image.load('img/main_back.png')\r\nplay_menu_surface = pygame.image.load('img/игровое меню.png')\r\n\r\nWIDTH = 1200\r\nHEIGHT = 800\r\nBULLET_SPEED = 10\r\nscreen = pygame.display.set_mode((WIDTH, HEIGHT))\r\nplay_menu_surface.set_colorkey((255, 255, 255))\r\nmain_back_surface.set_colorkey((255, 255, 255))\r\nplay_menu_surface = pygame.transform.scale(play_menu_surface, (play_menu_surface.get_width() // 1.45, play_menu_surface.get_height() // 1.135))\r\nplay_menu_rect = play_menu_surface.get_rect(center=(WIDTH // 2, 700))\r\n\r\nWHITE = (255, 255, 255)\r\nBLACK = (0, 0, 0)\r\nGREEN = (0, 255, 0)\r\n\r\ndef generate_textures():\r\n    m = randint(3, 5)\r\n    n = randint(3, 5)\r\n    l = randint(3, 6)\r\n    k = randint(3, 6)\r\n    o = randint(5, 7)\r\n    p = randint(5, 8)\r\n    r = randint(3, 6)\r\n    s = randint(3, 6)\r\n    t = randint(3, 5)\r\n    \r\n    Common_list.abv = [[[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1],\r\n            [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1],\r\n            [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1],\r\n            [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1],\r\n            [1,1,1,1,1,1,1,1,1,1,r,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1],\r\n            [1,1,1,1,1,1,1,1,9,0,0,0,0,0,0,0,9,1,1,k,1,1,1,1,1,1,1,1,1,1],\r\n            [1,1,1,1,1,1,1,1,1,0,l,9,1,1,1,1,k,1,1,1,1,1,1,1,1,1,1,1,1,1],\r\n            [1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1],\r\n            [1,1,1,1,1,1,1,1,1,0,9,1,1,m,1,1,1,1,1,k,1,1,l,1,1,1,1,1,1,1],\r\n            [1,1,1,1,1,1,1,1,9,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1],\r\n            [1,1,1,1,1,1,1,1,1,1,l,1,r,1,1,0,1,1,9,1,1,1,1,1,1,1,1,1,1,1],\r\n            [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1],\r\n            [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1],\r\n            [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1],\r\n            [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1]\r\n           ],\r\n           [[1,1,1,1,1,1,1,1,1,n,1,1,1,1,1,1,t,1,1,1,1,1,1,1,1,l,1,1,1,1],\r\n            [1,1,1,s,1,1,t,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,o,1],\r\n            [1,9,1,1,1,1,1,1,1,m,9,9,1,1,1,r,1,9,9,9,1,1,1,k,1,1,k,1,1,1],\r\n            [1,1,1,1,s,1,1,n,1,1,1,1,1,9,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\r\n            [1,r,1,1,m,1,1,1,1,1,r,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1],\r\n            [1,1,1,1,1,1,1,1,9,0,0,0,0,0,0,0,9,1,1,k,1,1,1,8,m,n,1,1,r,1],\r\n            [1,1,1,1,1,1,1,k,1,0,l,9,1,1,1,1,k,1,1,1,1,1,1,1,1,1,1,1,1,1],\r\n            [1,1,s,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,9,1,1,n,1,1,1],\r\n            [k,1,1,1,1,m,1,1,1,0,9,1,1,m,1,1,1,1,1,k,1,1,l,1,1,1,1,1,1,p],\r\n            [1,1,1,1,k,1,1,1,9,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,o,9,1,t,1,1],\r\n            [1,l,1,1,1,n,1,1,1,1,l,1,1,1,1,0,1,1,9,1,1,1,1,1,9,1,1,1,1,1],\r\n            [1,1,8,1,1,1,1,1,p,1,1,1,s,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\r\n            [1,1,1,1,1,s,1,1,1,1,1,1,1,p,1,9,1,m,1,1,1,1,1,1,n,1,1,1,1,1],\r\n            [1,1,1,o,1,1,1,n,1,1,1,1,1,1,1,1,1,1,1,1,1,1,s,1,1,1,l,1,p,1],\r\n            [1,n,1,1,1,1,1,1,1,1,s,1,1,1,1,r,1,1,1,k,1,1,1,1,1,l,1,1,1,1]\r\n           ],\r\n           [[1,1,1,1,1,m,1,3,4,5,6,1,9,1,1,1,1,m,1,1,1,1,t,1,l,1,1,1,1,1],\r\n            [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],\r\n            [1,0,1,s,1,1,1,1,1,m,9,9,1,1,1,r,1,9,9,9,1,1,1,k,1,1,k,1,0,1],\r\n            [1,0,9,1,s,1,1,n,1,1,1,1,1,9,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],\r\n            [1,0,1,1,m,1,1,1,1,1,r,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,l],\r\n            [0,0,1,1,1,1,1,1,9,0,0,0,0,0,0,0,9,1,1,k,1,1,1,8,m,n,1,1,1,1],\r\n            [1,1,1,1,1,1,1,k,1,0,l,9,1,1,1,1,k,1,1,1,1,1,1,1,1,1,1,1,1,1],\r\n            [1,o,1,p,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,9,1,1,n,l,1,1],\r\n            [1,1,1,1,1,m,1,1,1,0,9,1,1,m,1,1,1,1,1,k,1,1,l,1,1,1,1,1,1,1],\r\n            [0,0,9,1,k,1,1,1,9,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,o,9,1,1,1,1],\r\n            [t,0,1,9,1,n,1,1,1,1,l,1,r,1,1,0,1,1,9,1,1,1,1,1,9,1,1,1,1,1],\r\n            [1,0,1,1,1,1,1,1,p,1,1,1,s,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],\r\n            [1,0,t,9,1,s,1,1,1,1,1,1,1,p,1,9,1,m,1,1,n,1,1,1,1,1,1,1,0,1],\r\n            [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],\r\n            [1,1,t,s,1,1,1,n,1,1,1,1,1,n,1,r,1,1,1,l,1,1,n,1,1,1,1,1,1,1]\r\n           ]\r\n          ]\r\n\r\ndef textures(stage):\r\n    for a in range(15):\r\n        for b in range(30):\r\n            if Common_list.abv[stage-1][a][b] == 1:\r\n                i = grass_surf.get_rect(center=(20 + (b * 40), (a * 40) + 20))\r\n                screen.blit(grass_surf, i)\r\n            elif Common_list.abv[stage-1][a][b] == 9:\r\n                i = grass1_surf.get_rect(center=(20 + (b * 40), (a * 40) + 20))\r\n                screen.blit(grass1_surf, i)\r\n            elif Common_list.abv[stage-1][a][b] == 0:\r\n                i = road_surf.get_rect(center=(20 + (b * 40), (a * 40) + 20))\r\n                screen.blit(road_surf, i)\r\n            elif Common_list.abv[stage-1][a][b] == 3:\r\n                i = ss1_surf.get_rect(center=(20 + (b * 40), (a * 40) + 20))\r\n                screen.blit(ss1_surf, i)\r\n            elif Common_list.abv[stage-1][a][b] == 4:\r\n                i = ss2_surf.get_rect(center=(20 + (b * 40), (a * 40) + 20))\r\n                screen.blit(ss2_surf, i)\r\n            elif Common_list.abv[stage-1][a][b] == 5:\r\n                i = ss3_surf.get_rect(center=(20 + (b * 40), (a * 40) + 20))\r\n                screen.blit(ss3_surf, i)\r\n            elif Common_list.abv[stage - 1][a][b] == 6:\r\n                i = ss4_surf.get_rect(center=(20 + (b * 40), (a * 40) + 20))\r\n                screen.blit(ss4_surf, i)\r\n            elif Common_list.abv[stage - 1][a][b] == 7:\r\n                i = stone_surf.get_rect(center=(0 + (b * 40), (a * 40) + 0))\r\n                screen.blit(stone_surf, i)\r\n            elif Common_list.abv[stage - 1][a][b] == 8:\r\n                i = lake_surf.get_rect(center=(0 + (b * 40), (a * 40) + 0))\r\n                screen.blit(lake_surf, i)\r\n\r\ndef draw_clouds(stage):\r\n    for a in range(15):\r\n        for b in range(30):\r\n            if Common_list.abv[stage-1][a][b] == 2:\r\n                i = cloud_surf.get_rect(center=(20 + (b * 40), (a * 40) + 20))\r\n                screen.blit(cloud_surf, i)\r\n\t\t\t\t\r\n\r\ndef draw_bullet(x, y):\r\n\tpygame.draw.circle(screen, BLACK, (x, y), 1)\r\n\r\ndef draw_tower(x, y, z):\r\n    if z == 1:\r\n        i = tower_surf_1.get_rect(center=(x, y))\r\n        screen.blit(tower_surf_1, i)\r\n    if z == 2:\r\n        i = tower_surf_2.get_rect(center=(x, y))\r\n        screen.blit(tower_surf_2, i)\r\n    if z == 3:\r\n        i = tower_surf_3.get_rect(center=(x, y))\r\n        screen.blit(tower_surf_3, i)\r\n\r\ndef draw_enemy(enemy, time):\r\n    change = time - enemy.time_creation\r\n    if enemy.tik == 0:\r\n        enemy.tik = 4\r\n    if change//40 == change/40:\r\n        enemy.tik -= 1\r\n    if enemy.tik == 4:\r\n        i = enemy1_surf.get_rect(center=( (enemy.x), (enemy.y) ))\r\n        screen.blit(enemy1_surf, i)\r\n    if enemy.tik == 3:\r\n        i = enemy2_surf.get_rect(center=(  (enemy.x), (enemy.y)  ))\r\n        screen.blit(enemy2_surf, i)\r\n    if enemy.tik == 2:\r\n        i = enemy3_surf.get_rect(center=(  (enemy.x), (enemy.y)  ))\r\n        screen.blit(enemy3_surf, i)\r\n    if enemy.tik == 1:\r\n        i = enemy4_surf.get_rect(center=((enemy.x), (enemy.y)))\r\n        screen.blit(enemy4_surf, i)\r\n    if enemy.hp < 50:\r\n        i = dmg_surf.get_rect(center=(  (enemy.x), (enemy.y)  ))\r\n        screen.blit(dmg_surf, i)\r\ndef draw_enemy4(enemy, time):\r\n    change = time - enemy.time_creation\r\n    if enemy.tik == 0:\r\n        enemy.tik = 4\r\n    if change//40 == change/40:\r\n        enemy.tik -= 1\r\n    if enemy.tik == 4:\r\n        i = enemy41_surf.get_rect(center=( (enemy.x), (enemy.y) ))\r\n        screen.blit(enemy41_surf, i)\r\n    if enemy.tik == 3:\r\n        i = enemy42_surf.get_rect(center=(  (enemy.x), (enemy.y)  ))\r\n        screen.blit(enemy42_surf, i)\r\n    if enemy.tik == 2:\r\n        i = enemy43_surf.get_rect(center=(  (enemy.x), (enemy.y)  ))\r\n        screen.blit(enemy43_surf, i)\r\n    if enemy.tik == 1:\r\n        i = enemy44_surf.get_rect(center=((enemy.x), (enemy.y)))\r\n        screen.blit(enemy44_surf, i)\r\n    if enemy.hp < 50:\r\n        i = dmg_surf.get_rect(center=(  (enemy.x), (enemy.y)  ))\r\n        screen.blit(dmg_surf, i)\r\ndef draw_enemy1(enemy, time):\r\n    change = time - enemy.time_creation\r\n    if enemy.tik == 0:\r\n        enemy.tik = 2\r\n    if change//30 == change/30:\r\n        enemy.tik -= 1\r\n    #i = prb_surf.get_rect(center=((enemy.x), (enemy.y)))\r\n    #screen.blit(prb_surf, i)\r\n    if enemy.tik == 2:\r\n        if enemy.axis == 'x' and enemy.speed < 0:\r\n            i = beeleft_surf.get_rect(center=((enemy.x), (enemy.y)))\r\n            screen.blit(beeleft_surf, i)\r\n        if enemy.axis == 'x' and enemy.speed > 0:\r\n            i = bee_surf.get_rect(center=((enemy.x), (enemy.y)))\r\n            screen.blit(bee_surf, i)\r\n        if enemy.axis == 'y' and enemy.speed < 0:\r\n            i = beeup_surf.get_rect(center=((enemy.x), (enemy.y)))\r\n            screen.blit(beeup_surf, i)\r\n        if enemy.axis == 'y' and enemy.speed > 0:\r\n            i = beedown_surf.get_rect(center=((enemy.x), (enemy.y)))\r\n            screen.blit(beedown_surf, i)\r\n    if enemy.tik == 1:\r\n        if enemy.axis == 'x' and enemy.speed < 0:\r\n            i = beeleft1_surf.get_rect(center=((enemy.x), (enemy.y)))\r\n            screen.blit(beeleft1_surf, i)\r\n        if enemy.axis == 'x' and enemy.speed > 0:\r\n            i = bee1_surf.get_rect(center=((enemy.x), (enemy.y)))\r\n            screen.blit(bee1_surf, i)\r\n        if enemy.axis == 'y' and enemy.speed < 0:\r\n            i = beeup1_surf.get_rect(center=((enemy.x), (enemy.y)))\r\n            screen.blit(beeup1_surf, i)\r\n        if enemy.axis == 'y' and enemy.speed > 0:\r\n            i = beedown1_surf.get_rect(center=((enemy.x), (enemy.y)))\r\n            screen.blit(beedown1_surf, i)\r\ndef draw_enemy3(enemy, time):\r\n    change = time - enemy.time_creation\r\n    i = cloud_surf.get_rect(center=((enemy.x), (enemy.y)))\r\n    screen.blit(cloud_surf, i)\r\n\r\n\r\ndef draw_fort(fort):\r\n    i = fort_surf.get_rect(center=((860), (290)))\r\n    screen.blit(fort_surf, i)\r\n    pygame.draw.line(screen, (255, 0, 0), (810, 250), (810 + fort.hp//100, 250), 7)\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Textures.py b/Textures.py
--- a/Textures.py	(revision 3bc453ebe2f7d2b9ebabf20fdb341f95b712dca1)
+++ b/Textures.py	(date 1671126573394)
@@ -8,6 +8,7 @@
 e2r_surf = pygame.image.load("img/en2r.png")
 e2l_surf = pygame.image.load("img/en2l.png")
 e2u_surf = pygame.image.load("img/en2u.png")
+wastower_surf = pygame.image.load("img/wastower.png")
 
 bee_surf = pygame.image.load("img/bee.png")
 bee1_surf = pygame.image.load("img/bee1.png")
@@ -69,21 +70,21 @@
     s = randint(3, 6)
     t = randint(3, 5)
     
-    Common_list.abv = [[[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
-            [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
-            [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
-            [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
-            [1,1,1,1,1,1,1,1,1,1,r,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
-            [1,1,1,1,1,1,1,1,9,0,0,0,0,0,0,0,9,1,1,k,1,1,1,1,1,1,1,1,1,1],
-            [1,1,1,1,1,1,1,1,1,0,l,9,1,1,1,1,k,1,1,1,1,1,1,1,1,1,1,1,1,1],
-            [1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1],
-            [1,1,1,1,1,1,1,1,1,0,9,1,1,m,1,1,1,1,1,k,1,1,l,1,1,1,1,1,1,1],
-            [1,1,1,1,1,1,1,1,9,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
-            [1,1,1,1,1,1,1,1,1,1,l,1,r,1,1,0,1,1,9,1,1,1,1,1,1,1,1,1,1,1],
-            [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
-            [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
-            [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
-            [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1]
+    Common_list.abv = [[[1,1,m,n,l,k,1,1,r,s,t,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
+            [1,1,1,9,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
+            [1,1,1,1,1,9,1,1,1,1,1,1,1,9,1,0,1,1,1,1,1,1,m,1,9,1,1,1,p,1],
+            [1,1,1,o,1,9,1,1,9,1,1,l,1,1,1,0,1,1,1,1,1,1,1,5,1,1,9,1,1,1],
+            [1,1,k,1,4,1,1,t,1,1,r,1,9,1,1,0,1,n,1,1,1,1,1,1,6,1,1,1,1,1],
+            [1,1,1,1,1,1,1,1,9,0,0,0,0,0,0,0,9,1,1,k,1,1,m,1,1,1,9,1,1,9],
+            [9,1,1,1,s,1,1,1,1,0,l,9,1,9,1,9,k,1,1,1,9,9,1,1,1,1,1,6,1,1],
+            [1,9,1,l,1,1,6,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,n,1,1,1,1],
+            [1,1,1,1,9,1,1,1,1,0,9,1,1,m,1,1,1,9,1,k,1,1,l,1,1,1,1,1,1,1],
+            [1,1,1,p,1,1,1,1,9,0,0,0,0,0,0,0,1,1,1,1,1,1,1,9,1,9,4,1,1,1],
+            [1,1,1,9,1,1,9,1,1,1,l,1,r,1,1,0,1,1,9,1,k,1,1,1,9,1,1,1,9,1],
+            [1,1,1,n,1,1,4,9,1,1,1,1,9,1,1,0,1,1,1,1,1,9,9,1,1,1,1,n,1,1],
+            [1,1,r,1,k,1,1,1,1,9,1,1,1,1,9,0,1,1,1,1,4,1,r,1,1,1,1,1,1,1],
+            [1,1,1,1,1,1,o,9,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,8,1,m,1,1,1],
+            [1,1,1,1,9,1,1,1,1,1,r,9,1,1,1,0,1,1,s,1,9,1,1,t,1,1,9,1,1,1]
            ],
            [[1,1,1,1,1,1,1,1,1,n,1,1,1,1,1,1,t,1,1,1,1,1,1,1,1,l,1,1,1,1],
             [1,1,1,s,1,1,t,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,o,1],
@@ -149,6 +150,9 @@
             elif Common_list.abv[stage - 1][a][b] == 8:
                 i = lake_surf.get_rect(center=(0 + (b * 40), (a * 40) + 0))
                 screen.blit(lake_surf, i)
+            elif Common_list.abv[stage - 1][a][b] == 11:
+                i = wastower_surf.get_rect(center=(20 + (b * 40), (a * 40) + 20))
+                screen.blit(wastower_surf, i)
 
 def draw_clouds(stage):
     for a in range(15):
@@ -190,7 +194,7 @@
     if enemy.tik == 1:
         i = enemy4_surf.get_rect(center=((enemy.x), (enemy.y)))
         screen.blit(enemy4_surf, i)
-    if enemy.hp < 50:
+    if enemy.hp < 60:
         i = dmg_surf.get_rect(center=(  (enemy.x), (enemy.y)  ))
         screen.blit(dmg_surf, i)
 def draw_enemy4(enemy, time):
@@ -211,7 +215,7 @@
     if enemy.tik == 1:
         i = enemy44_surf.get_rect(center=((enemy.x), (enemy.y)))
         screen.blit(enemy44_surf, i)
-    if enemy.hp < 50:
+    if enemy.hp < 60:
         i = dmg_surf.get_rect(center=(  (enemy.x), (enemy.y)  ))
         screen.blit(dmg_surf, i)
 def draw_enemy1(enemy, time):
Index: Classes.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from math import *\r\nfrom Textures import *\r\nimport Common_list\r\n\r\nSIDE = 40\r\nstart_positions = [[0, 599, 620], [140, 460, 1199], [220, 380, 0]]\r\n\r\ndef generate_road():\r\n    Common_list.is_free_for_tower = [[[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\r\n                          [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\r\n                          [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\r\n                          [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\r\n                          [0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,0,0,0,0,0,0],\r\n                          [0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,1,1,1,1,1,1,0,0,0,0,0,0,0],\r\n                          [0,0,0,0,0,0,0,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0],\r\n                          [0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0],\r\n                          [0,0,0,0,0,0,0,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0],\r\n                          [0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,1,1,1,1,1,1,0,0,0,0,0,0,0],\r\n                          [0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,0,0,0,0,0,0],\r\n                          [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\r\n                          [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\r\n                          [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\r\n                          [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]\r\n                         ],\r\n                         [[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\r\n                          [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\r\n                          [0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0],\r\n                          [0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\r\n                          [0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0],\r\n                          [0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0],\r\n                          [0,0,0,0,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0],\r\n                          [0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0],\r\n                          [0,0,0,0,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0],\r\n                          [0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0],\r\n                          [0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0],\r\n                          [0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\r\n                          [0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0],\r\n                          [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\r\n                          [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]\r\n                         ],\r\n                         [[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],\r\n                          [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],\r\n                          [1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1],\r\n                          [1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],\r\n                          [1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1],\r\n                          [0,0,1,1,1,1,1,1,1,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1],\r\n                          [1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],\r\n                          [1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1],\r\n                          [1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],\r\n                          [0,0,1,1,1,1,1,1,1,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1],\r\n                          [1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1],\r\n                          [1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],\r\n                          [1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1],\r\n                          [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],\r\n                          [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]\r\n                         ]\r\n                        ]\r\n\r\nclass Bullet:\r\n    def __init__(self, x, y, vx, vy, dmg):\r\n        self.x = x\r\n        self.y = y\r\n        self.vx = vx\r\n        self.vy = vy\r\n        self.dmg = dmg\r\n        self.live = 1\r\n\t\r\n    def draw_and_move(self):\r\n        draw_bullet(self.x, self.y)\r\n        self.x += self.vx\r\n        self.y += self.vy\r\n        if self.x < 0 or self.x > WIDTH or self.y < 0 or self.y > HEIGHT:\r\n            Common_list.bullets.remove(self)\r\n        \r\n    def hit_enemies(self, money):\r\n        for enemy in Common_list.enemies:\r\n            if (enemy.x-self.x)**2 + (enemy.y-self.y)**2 <= enemy.radius**2:\r\n                money = enemy.hit(self.dmg, money)\r\n                Common_list.bullets.remove(self)\r\n                break\r\n        return money\r\n                \r\n\t\r\n\r\nclass Tower1:\r\n    \"\"\"Класс первой башни (с дискретными снарядами)\"\"\"\r\n    def __init__(self, screen, stage, x_square, y_square):\r\n        self.type = 1\r\n        self.x_square = x_square\r\n        self.y_square = y_square\r\n        self.x = self.x_square * SIDE + SIDE // 2\r\n        self.y = self.y_square * SIDE + SIDE // 2\r\n        Common_list.is_free_for_tower[stage-1][self.y_square][self.x_square] = 2 + len(Common_list.towers)\r\n        self.screen = screen\r\n        self.dmg = 50\r\n        # Урон пушки\r\n        self.speed = 30\r\n        # Скорострельность\r\n        self.angle = 0\r\n        # Угол поворота\r\n        self.radius = 200\r\n        # Дальнобойность\r\n        self.level = 1\r\n        # Уровень башни (максимум 3)\r\n        self.price = 100\r\n        # Стоимость башни в у.е.\r\n        self.upgrade_price = [20, 30, 40]\r\n        # Стоимость улучшения башни (меняется в процессе (локальной) прогрессии)\r\n        self.image = np.array([])\r\n        # Переменная, хранящая изображение башни\r\n        self.attacked_enemy = None\r\n        # Переменная, хранящая атакованного врага\r\n        self.t = self.speed\r\n\r\n    def shoot(self):\r\n        \"\"\" Функция выстрела по врагу\r\n        enemies - список активных врагов на карте\"\"\"\r\n        if self.attacked_enemy:\r\n            if ((self.attacked_enemy.x - self.x) ** 2 + (self.attacked_enemy.y - self.y) ** 2) > self.radius ** 2 \\\r\n                    or self.attacked_enemy.hp <= 0:\r\n                self.attacked_enemy = None\r\n                self.shoot()\r\n            else:\r\n                self.angle = atan2(self.attacked_enemy.y - self.y, self.attacked_enemy.x - self.x)\r\n                vx = BULLET_SPEED * cos(self.angle)\r\n                vy = BULLET_SPEED * sin(self.angle)\r\n                if self.attacked_enemy.axis == 'x':\r\n                    vx += self.attacked_enemy.speed\r\n                else:\r\n                    vy += self.attacked_enemy.speed\r\n                bullet = Bullet(self.x, self.y, vx, vy, self.dmg)\r\n                Common_list.bullets.append(bullet)\r\n        else:\r\n            min_distance = self.radius\r\n            for enemy in Common_list.enemies:\r\n                enemy_distance = np.sqrt((enemy.x - self.x) ** 2 + (enemy.y - self.y) ** 2)\r\n                if enemy_distance <= min_distance:\r\n                    min_distance = enemy_distance\r\n                    self.attacked_enemy = enemy\r\n            if self.attacked_enemy:\r\n                self.shoot()\r\n\r\n    def upgrade(self):\r\n        \"\"\"Если уровень не максимальный и достаточно денег, улучшает башню\"\"\"\r\n        self.level += 1\r\n        self.dmg += 10\r\n        self.speed -= 10\r\n        self.t = self.speed\r\n        self.radius += 20\r\n\r\n    def draw(self):\r\n        \"\"\"Рисует башню (тут должна использоваться переменная self.image, но рисунков пока нет((((,\r\n        поэтому рисует круг с дулом)\"\"\"\r\n        pygame.draw.line(self.screen, (0, 0, 0), (self.x, self.y),\r\n                         (self.x + 20 * cos(self.angle), self.y + 20 * sin(self.angle)), 2)\r\n        draw_tower(self.x, self.y, self.level)\r\n\r\n    def sell(self, stage):\r\n        \"\"\"Функция продажи башни\"\"\"\r\n        for tower_index in range(len(Common_list.towers)):\r\n            if tower_index > Common_list.is_free_for_tower[stage-1][self.y_square][self.x_square] - 2:\r\n                Common_list.is_free_for_tower[stage-1][Common_list.towers[tower_index].y_square][Common_list.towers[tower_index].x_square] -= 1\r\n        Common_list.is_free_for_tower[stage-1][self.y_square][self.x_square] = 1\r\n        Common_list.towers.remove(self)\r\n\r\nclass Tower2:\r\n    \"\"\"Класс второй башни (с лазерами)\"\"\"\r\n    def __init__(self, screen, stage, x_square, y_square):\r\n        self.type = 2\r\n        self.x_square = x_square\r\n        self.y_square = y_square\r\n        self.x = self.x_square * SIDE + SIDE // 2\r\n        self.y = self.y_square * SIDE + SIDE // 2\r\n        Common_list.is_free_for_tower[stage-1][self.y_square][self.x_square] = 2 + len(Common_list.towers)\r\n        self.screen = screen\r\n        self.dmg = 1\r\n        # Урон пушки\r\n        self.angle = 0\r\n        # Угол поворота\r\n        self.radius = 200\r\n        # Дальнобойность\r\n        self.level = 1\r\n        # Уровень башни (максимум 3)\r\n        self.price = 100\r\n        # Стоимость башни в у.е.\r\n        self.upgrade_price = [20, 30, 40]\r\n        # Стоимость улучшения башни (меняется в процессе (локальной) прогрессии)\r\n        self.image = np.array([])\r\n        # Переменная, хранящая изображение башни\r\n        self.attacked_enemy = None\r\n        # Переменная, хранящая атакованного врага\r\n\r\n    def shoot(self, money):\r\n        \"\"\" Функция выстрела по врагу\r\n        enemies - список активных врагов на карте\"\"\"\r\n        if self.attacked_enemy:\r\n            if ((self.attacked_enemy.x - self.x) ** 2 + (self.attacked_enemy.y - self.y) ** 2) > self.radius ** 2 \\\r\n                    or self.attacked_enemy.hp <= 0:\r\n                self.attacked_enemy = None\r\n                money = self.shoot(money)\r\n            else:\r\n                self.angle = atan2(self.attacked_enemy.y - self.y, self.attacked_enemy.x - self.x)\r\n                money = self.attacked_enemy.hit(self.dmg, money)\r\n        else:\r\n            min_distance = self.radius\r\n            for enemy in Common_list.enemies:\r\n                enemy_distance = np.sqrt((enemy.x - self.x) ** 2 + (enemy.y - self.y) ** 2)\r\n                if enemy_distance <= min_distance:\r\n                    min_distance = enemy_distance\r\n                    self.attacked_enemy = enemy\r\n            if self.attacked_enemy:\r\n                money = self.shoot(money)\r\n        return money\r\n\r\n    def upgrade(self):\r\n        \"\"\"Если уровень не максимальный и достаточно денег, улучшает башню\"\"\"\r\n        self.level += 1\r\n        self.dmg += 10\r\n        self.speed -= 10\r\n        self.t = self.speed\r\n        self.radius += 20\r\n\r\n    def draw(self):\r\n        \"\"\"Рисует башню (тут должна использоваться переменная self.image, но рисунков пока нет((((,\r\n        поэтому рисует круг с дулом)\"\"\"\r\n        pygame.draw.line(self.screen, (0, 0, 0), (self.x, self.y),\r\n                         (self.x + 20 * cos(self.angle), self.y + 20 * sin(self.angle)), 2)\r\n        draw_tower(self.x, self.y, self.level)\r\n\r\n    def sell(self, stage):\r\n        \"\"\"Функция продажи башни\"\"\"\r\n        for tower_index in range(len(Common_list.towers)):\r\n            if tower_index > Common_list.is_free_for_tower[stage-1][self.y_square][self.x_square] - 2:\r\n                Common_list.is_free_for_tower[stage-1][Common_list.towers[tower_index].y_square][Common_list.towers[tower_index].x_square] -= 1\r\n        Common_list.is_free_for_tower[stage-1][self.y_square][self.x_square] = 1\r\n        Common_list.towers.remove(self)\r\n\r\nclass Enemy1:\r\n    \"\"\"Класс, описывающий превый тип врага\"\"\"\r\n    def __init__(self, screen, x, y, time_creation):\r\n        self.time_creation = time_creation\r\n        self.screen = screen\r\n        self.x = x\r\n        self.y = y\r\n        self.type = 1\r\n        self.tik = 4\r\n        self.speed = 1\r\n        # Скорость юнита\r\n        self.axis = 'x'\r\n        #Ось движения юнита\r\n        self.dmg = 10\r\n        # Урон юнита по главной постройке\r\n        self.hp = 200\r\n        # Здоровье юнита\r\n        self.reward = 30\r\n        # Вознаграждение за убийство юнита\r\n        self.image = np.array([])\r\n        # Изображение юнита\r\n        self.radius = 10\r\n        # Временная (!!!!!) переменная, отвечающая за размер врага\r\n\r\n\r\n    def hit(self, tower_damage, money):\r\n        \"\"\"Функция, отвечающая за боль и страдания юнита\"\"\"\r\n        self.hp -= tower_damage\r\n        if self.hp <= 0:\r\n            money += self.reward\r\n            Common_list.enemies.remove(self)\r\n        return money\r\n\r\n    def move(self, stage):\r\n        \"\"\"Функция, двигающаяя юнита\"\"\"\r\n        if self.axis == 'x' and not (0 <= (self.x+np.sign(self.speed)*(SIDE//2+1)) // SIDE <= 29):\r\n            self.speed = -self.speed\r\n        elif self.axis == 'x' and Common_list.abv[stage-1][self.y // SIDE][(self.x+np.sign(self.speed)*(SIDE//2+1)) // SIDE] != 0:\r\n            self.axis = 'y'\r\n            self.x = (self.x//SIDE) * SIDE + SIDE // 2 \r\n            if not (0 <= (self.y+np.sign(self.speed)*(SIDE//2+1)) // SIDE <= 14) or Common_list.abv[stage-1][(self.y+np.sign(self.speed)*(SIDE//2+1)) // SIDE][self.x // SIDE] != 0:\r\n                self.speed = -self.speed\r\n        elif self.axis == 'y' and not (0 <= (self.y+np.sign(self.speed)*(SIDE//2+1)) // SIDE <= 14):\r\n            self.speed = -self.speed\r\n        elif self.axis == 'y' and (Common_list.abv[stage-1][(self.y+np.sign(self.speed)*(SIDE//2+1)) // SIDE][self.x // SIDE] != 0 or abs(self.y - 300) <= abs(self.speed) / 2):\r\n            self.axis = 'x'\r\n            self.y = (self.y//SIDE) * SIDE + SIDE // 2\r\n            if not (0 <= (self.x+np.sign(self.speed)*(SIDE//2+1)) // SIDE <= 29) or Common_list.abv[stage-1][self.y // SIDE][(self.x+np.sign(self.speed)*(SIDE//2+1)) // SIDE] != 0:\r\n                self.speed = -self.speed\r\n        if self.axis == 'x':\r\n            self.x += self.speed\r\n        else:\r\n            self.y += self.speed\r\n        if self.y == 300 and self.x >= 840:\r\n            self.x = 840\r\n\r\n    def attack(self, fortress):\r\n        fortress.hp -= self.dmg\r\n\r\n    def draw(self, time):\r\n        draw_enemy(self, time)\r\n\r\n\r\nclass Enemy2(Enemy1):\r\n    \"\"\"Класс, описывающий 2 тип врага\"\"\"\r\n    def __init__(self, screen, x, y, time_creation):\r\n        super().__init__(screen, x, y, time_creation)\r\n        self.hp = 50\r\n        self.reward = 50\r\n        self.tik = 2\r\n        self.speed = 4\r\n\r\n    def draw(self, time):\r\n        draw_enemy1(self, time)\r\n\r\nclass Enemy4(Enemy1):\r\n    \"\"\"Класс, описывающий 2 тип врага\"\"\"\r\n    def __init__(self, screen, x, y, time_creation):\r\n        super().__init__(screen, x, y, time_creation)\r\n        self.hp = 200\r\n        self.reward = 50\r\n        self.tik = 4\r\n        self.speed = 1\r\n\r\n    def draw(self, time):\r\n        draw_enemy4(self, time)\r\n\r\nclass Fortress:\r\n    \"\"\"Класс описывающий главное здание\"\"\"\r\n    def __init__(self, screen):\r\n        self.screen = screen\r\n        self.x = 860\r\n        self.y = 300\r\n        self.hp = 10000\r\n        self.is_alive = True\r\n\r\n    def hit(self):\r\n        \"\"\"Функция, отвечающая за повреждения главного здания\"\"\"\r\n        for enemy in Common_list.enemies:\r\n            enemy_distance = np.sqrt((self.x - enemy.x) ** 2 + (self.y - enemy.y) ** 2)\r\n            if enemy_distance == 20:\r\n                enemy.attack(self)\r\n                if self.hp <= 0:\r\n                    self.is_alive = False\r\n\r\n    def alive_or_not(self):\r\n        \"\"\"Функция, отвечающая на вопрос: \"проиграл ли игрок?\" \"\"\"\r\n        return self.is_alive\r\n\r\n    def draw(self):\r\n        draw_fort(self)\r\n        \r\nclass MainBack:\r\n    def __init__(self):\r\n        self.angle = 0\r\n        self.main_back_surface = pygame.transform.scale(main_back_surface, (main_back_surface.get_width() // 0.5,\\\r\n                                                     main_back_surface.get_height() // 0.5))\r\n\r\n    def draw(self):\r\n        screen.fill(WHITE)\r\n        screen.blit(self.main_back_surface, (-250 + 200*cos(self.angle), -150 + 100*sin(self.angle)))\r\n        self.angle += 0.007 + 0.002 * cos(self.angle/pi)\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Classes.py b/Classes.py
--- a/Classes.py	(revision 3bc453ebe2f7d2b9ebabf20fdb341f95b712dca1)
+++ b/Classes.py	(date 1671127778269)
@@ -317,7 +317,7 @@
         self.hp = 200
         self.reward = 50
         self.tik = 4
-        self.speed = 1
+        self.speed = 2
 
     def draw(self, time):
         draw_enemy4(self, time)
Index: Buttons.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from Classes import *\r\nfrom Textures import *\r\nimport Common_list\r\n\r\n\r\ndef erase_useless_buttons(text_font):\r\n    \"\"\"функция стирающая ненужные в некоторый момент кнопки\"\"\"\r\n    Common_list.buttons = [QuitButton(screen, 1100, 0, text_font)]\r\n\r\n\r\nclass Button:\r\n    \"\"\" Общий класс кнопки (родитель всех кнопок) \"\"\"\r\n    def __init__(self, screen, x, y, text_font, width=100, height=50, colour=(255, 0, 0)):\r\n        self.screen = screen\r\n        self.x = x\r\n        self.y = y\r\n        self.width = width\r\n        # Ширина кнопки\r\n        self.height = height\r\n        # Высота кнопки\r\n        self.colour = colour\r\n        # Цвет кнопки\r\n        self.text_font = text_font\r\n        # Шрифт текста на кнопке (в идиале бы иконки...)\r\n        self.image = np.array([])\r\n        # Иконка(в идеале)\r\n\r\n    def draw(self):\r\n        \"\"\" Рисует кнопку \"\"\"\r\n        pygame.draw.rect(self.screen, self.colour, (self.x, self.y, self.width, self.height))\r\n\r\n    def is_pressed(self, event):\r\n        \"\"\" Распознаёт, было ли сделано нажатие по кнопке \"\"\"\r\n        if self.x <= event.pos[0] <= self.x + self.width and self.y <= event.pos[1] <= self.y + self.height:\r\n            return True\r\n        else:\r\n            return False\r\n\r\n\r\nclass QuitButton(Button):\r\n    \"\"\" Класс кнопки выхода \"\"\"\r\n    def __init__(self, screen, x, y, text_font, width=100, height=50, colour=(255, 0, 0)):\r\n        super().__init__(screen, x, y, text_font, width, height, colour)\r\n        self.type = \"quit_button\"\r\n\r\n    def draw(self):\r\n        super().draw()\r\n        self.screen.blit(self.text_font.render('Quit', True, (0, 0, 0)),\r\n                         (self.x + self.width/5, self.y + self.height/10))\r\n\r\n\r\nclass UpgradeButton(Button):\r\n    \"\"\"Класс кнопки апгрейда\"\"\"\r\n    def __init__(self, screen, x, y, text_font, width=270, height=50, colour=(255, 0, 0)):\r\n        super().__init__(screen, x, y, text_font, width, height, colour)\r\n        self.type = \"upgrade_button\"\r\n\r\n    def draw(self):\r\n        self.screen.blit(self.text_font.render(\"Upgrade tower (z)\", True, BLACK), (self.x, self.y + self.height/10))\r\n\r\n    def upgrade_initiation(self, twr, money):\r\n        \"\"\"функция, запускпющая процесс улучшения\"\"\"\r\n        if twr.level >= 3:\r\n            text = \"Maximum level\"\r\n        elif money >= twr.upgrade_price[twr.level - 1]:\r\n            money -= twr.upgrade_price[twr.level - 1]\r\n            twr.upgrade()\r\n            text = \"There is tower LVL \" + str(twr.level)\r\n        elif money < twr.upgrade_price[twr.level - 1]:\r\n            text = \"Need more money\"\r\n        return money, text\r\n\r\n\r\nclass SellButton(Button):\r\n    def __init__(self, screen, x, y, text_font, width=200, height=50, colour=(255, 0, 0)):\r\n        super().__init__(screen, x, y, text_font, width, height, colour)\r\n        self.type = \"sell_button\"\r\n\r\n    def draw(self):\r\n        self.screen.blit(self.text_font.render(\"Sell tower (x)\", True, BLACK), (self.x, self.y + self.height/10))\r\n\r\n\r\nclass BuildButton1(Button):\r\n    def __init__(self, screen, x, y, text_font, width=220, height=50, colour=(255, 0, 0)):\r\n        super().__init__(screen, x, y, text_font, width, height, colour)\r\n        self.type = \"build_button_1\"\r\n\r\n    def draw(self):\r\n        self.screen.blit(self.text_font.render(\"Build tower 1 (z)\", True, BLACK), (self.x, self.y + self.height / 10))\r\n\r\n    def build_initiation(self, money, screen, x_square_light, y_square_light, button, play_menu_text_surface, stage, active_tower):\r\n        \"\"\"функция, запускающая процесс постройки\"\"\"\r\n        if money < 100:\r\n            text = \"Not enough money\"\r\n        else:\r\n            Common_list.abv[stage-1][y_square_light][x_square_light] = 1\r\n            text = \"There is tower LVL \" + str(1)\r\n            active_tower = Tower1(screen, stage, x_square_light, y_square_light)\r\n            Common_list.towers.append(active_tower)\r\n            money -= 100\r\n        return money, text, active_tower\r\n\r\n\r\nclass BuildButton2(Button):\r\n    def __init__(self, screen, x, y, text_font, width=220, height=50, colour=(255, 0, 0)):\r\n        super().__init__(screen, x, y, text_font, width, height, colour)\r\n        self.type = \"build_button_2\"\r\n\r\n    def draw(self):\r\n        self.screen.blit(self.text_font.render(\"Build tower 2 (x)\", True, BLACK), (self.x, self.y + self.height / 10))\r\n\r\n    def build_initiation(self, money, screen, x_square_light, y_square_light, button, play_menu_text_surface, stage,\r\n                         active_tower):\r\n        \"\"\"функция, запускающая процесс постройки\"\"\"\r\n        if money < 150:\r\n            text = \"Not enough money\"\r\n        else:\r\n            Common_list.abv[stage - 1][y_square_light][x_square_light] = 1\r\n            text = \"There is tower LVL \" + str(1)\r\n            active_tower = Tower2(screen, stage, x_square_light, y_square_light)\r\n            Common_list.towers.append(active_tower)\r\n            money -= 150\r\n        return money, text, active_tower\r\n\r\n\r\nclass StartButton(Button):\r\n    def __init__(self, screen, x, y, text_font, width=150, height=50, colour=(164,116,73)):\r\n        super().__init__(screen, x, y, text_font, width, height, colour)\r\n        self.type = \"start_button\"\r\n\r\n    def draw(self, COLOUR):\r\n        super().draw()\r\n        self.screen.blit(self.text_font.render(\"Start Game\", True, COLOUR), (self.x, self.y))\r\n\r\n\r\nclass ExitButton(Button):\r\n    def __init__(self, screen, x, y, text_font, width=150, height=50, colour=(164,116,73)):\r\n        super().__init__(screen, x, y, text_font, width, height, colour)\r\n        self.type = \"exit_button\"\r\n\r\n    def draw(self, COLOUR, loose):\r\n        if not loose:\r\n            super().draw()\r\n        self.screen.blit(self.text_font.render(\"Exit\", True, COLOUR), (self.x + 50, self.y))\r\n\r\n\r\nclass SelectButton1(Button):\r\n    def __init__(self, screen, x, y, text_font, width=150, height=50, colour=(164,116,73)):\r\n        super().__init__(screen, x, y, text_font, width, height, colour)\r\n        self.name = \"level 1\"\r\n        self.type = \"level1_button\"\r\n\r\n    def draw(self, COLOUR):\r\n        super().draw()\r\n        self.screen.blit(self.text_font.render(self.name, True, COLOUR), (self.x + 40, self.y))\r\n\r\n\r\nclass SelectButton2(SelectButton1):\r\n    def __init__(self, screen, x, y, text_font, width=150, height=50, colour=(164,116,73)):\r\n        super().__init__(screen, x, y, text_font, width, height, colour)\r\n        self.name = \"level 2\"\r\n        self.type = \"level2_button\"\r\n\r\n\r\nclass SelectButton3(SelectButton1):\r\n    def __init__(self, screen, x, y, text_font, width=150, height=50, colour=(164,116,73)):\r\n        super().__init__(screen, x, y, text_font, width, height, colour)\r\n        self.name = \"level 3\"\r\n        self.type = \"level3_button\"\r\n\r\n\r\nclass ExitToMainMenuButton(StartButton):\r\n    def draw(self, COLOUR):\r\n        self.screen.blit(self.text_font.render(\"Exit to main menu\", True, COLOUR), (self.x, self.y))\r\n\r\n\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Buttons.py b/Buttons.py
--- a/Buttons.py	(revision 3bc453ebe2f7d2b9ebabf20fdb341f95b712dca1)
+++ b/Buttons.py	(date 1671126537063)
@@ -93,7 +93,7 @@
         if money < 100:
             text = "Not enough money"
         else:
-            Common_list.abv[stage-1][y_square_light][x_square_light] = 1
+            Common_list.abv[stage-1][y_square_light][x_square_light] = 11
             text = "There is tower LVL " + str(1)
             active_tower = Tower1(screen, stage, x_square_light, y_square_light)
             Common_list.towers.append(active_tower)
Index: Game_process.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import random as rnd\r\nfrom Textures import *\r\nfrom Buttons import *\r\nfrom Classes import *\r\nfrom Main_menu import *\r\nimport Common_list\r\n\r\ndef game_process(text_font, stage, clock, FPS):\r\n    finished = False\r\n    loose = False\r\n    fortress = Fortress(screen)\r\n    Common_list.buttons = [QuitButton(screen, 1100, 0, text_font)]\r\n    Common_list.enemies = []\r\n    Common_list.towers = []\r\n    Common_list.bullets = []\r\n    money = 200\r\n    time = 0\r\n    Delta_t = 1\r\n    x_square_light = 21\r\n    y_square_light = 7\r\n    active_tower = None\r\n    flag_build = False\r\n    flag_tower = False\r\n    play_menu_text_surface = pygame.font.SysFont('Comic Sans MS', 30, True)\r\n    text = \"You can't build tower there\"\r\n    time_move = 0\r\n    type_move = \"\"\r\n    flag_move = False\r\n    generate_textures()\r\n    generate_road()\r\n\r\n    while not finished:\r\n        screen.fill(WHITE)\r\n        textures(stage)\r\n        clock.tick(FPS)\r\n        flag_move = False\r\n        for event in pygame.event.get():\r\n            if event.type == pygame.MOUSEBUTTONDOWN:\r\n                for button in Common_list.buttons:\r\n                    if button.is_pressed(event):\r\n                        if button.type == \"quit_button\":\r\n                            finished = True\r\n                if event.button == 1 or event.button == 3:\r\n                    if event.pos[1] < 600:\r\n                        active_tower = None\r\n                        if (Common_list.boards[stage-1][0][0] <= event.pos[0] // SIDE <= Common_list.boards[stage-1][0][1]) and\\\r\n                           (Common_list.boards[stage-1][1][0] <= event.pos[1] // SIDE <= Common_list.boards[stage-1][1][1]):\r\n                            x_square_light = event.pos[0] // SIDE\r\n                            y_square_light = event.pos[1] // SIDE\r\n                        if Common_list.is_free_for_tower[stage-1][y_square_light][x_square_light] == 0 or Common_list.abv[stage-1][y_square_light][x_square_light] == 3 or\\\r\n                           {Common_list.abv[stage-1][y_square_light][x_square_light],\\\r\n                            Common_list.abv[stage-1][min(14, y_square_light+1)][x_square_light],\\\r\n                            Common_list.abv[stage-1][min(14, y_square_light+1)][min(29, x_square_light+1)],\\\r\n                            Common_list.abv[stage-1][y_square_light][min(29, x_square_light+1)]}.intersection({7,8}) != set():\r\n                            flag_build = False\r\n                            flag_tower = False\r\n                            text = \"You can't build tower there\"\r\n                        elif Common_list.is_free_for_tower[stage-1][y_square_light][x_square_light] == 1:\r\n                            flag_build = True\r\n                            flag_tower = False\r\n                            text = \"You can build tower there\"\r\n                        else:\r\n                            flag_build = False\r\n                            flag_tower = True\r\n                            active_tower = Common_list.towers[Common_list.is_free_for_tower[stage-1][y_square_light][x_square_light] - 2]\r\n                            text = \"There is tower LVL \" + str(active_tower.level)\r\n                    else:\r\n                        erase_useless_buttons(text_font)\r\n                        if flag_build:\r\n                            Common_list.buttons.append(BuildButton1(screen, 600, 650, play_menu_text_surface))\r\n                            Common_list.buttons.append(BuildButton2(screen, 890, 650, play_menu_text_surface))\r\n                        elif flag_tower:\r\n                            Common_list.buttons.append(UpgradeButton(screen, 600, 650, play_menu_text_surface))\r\n                            Common_list.buttons.append(SellButton(screen, 900, 650, play_menu_text_surface))\r\n                        for button in Common_list.buttons:\r\n                            if button.is_pressed(event):\r\n                                if button.type == \"upgrade_button\":\r\n                                    twr = Common_list.towers[Common_list.is_free_for_tower[stage-1][y_square_light][x_square_light] - 2]\r\n                                    money, text = button.upgrade_initiation(twr, money)\r\n                                if button.type == \"sell_button\":\r\n                                    twr = Common_list.towers[Common_list.is_free_for_tower[stage-1][y_square_light][x_square_light] - 2]\r\n                                    money += twr.price / 2\r\n                                    while twr.level > 1:\r\n                                        money += twr.upgrade_price[twr.level - 1] / 2\r\n                                        twr.level -= 1\r\n                                    twr.sell(stage)\r\n                                    text = \"You can build tower there\"\r\n                                    flag_build = True\r\n                                    flag_tower = False\r\n                                if button.type == \"build_button_1\":\r\n                                    flag_build = False\r\n                                    flag_tower = True\r\n                                    money, text, active_tower = button.build_initiation(money, screen, x_square_light,\r\n                                                                          y_square_light, button,\r\n                                                                          play_menu_text_surface, stage, active_tower)\r\n                                if button.type == \"build_button_2\":\r\n                                    flag_build = False\r\n                                    flag_tower = True\r\n                                    money, text, active_tower = button.build_initiation(money, screen, x_square_light,\r\n                                                                                        y_square_light, button,\r\n                                                                                        play_menu_text_surface, stage,\r\n                                                                                        active_tower)\r\n\r\n            elif event.type == pygame.KEYDOWN:\r\n                if event.key == pygame.K_ESCAPE:\r\n                    finished = True\r\n                elif event.key == pygame.K_UP:\r\n                    flag_move = True\r\n                    y_square_light = max(y_square_light-1, Common_list.boards[stage-1][1][0])\r\n                elif event.key == pygame.K_DOWN:\r\n                    flag_move = True\r\n                    y_square_light = min(y_square_light+1, Common_list.boards[stage-1][1][1])\r\n                elif event.key == pygame.K_LEFT:\r\n                    flag_move = True\r\n                    x_square_light = max(x_square_light-1, Common_list.boards[stage-1][0][0])\r\n                elif event.key == pygame.K_RIGHT:\r\n                    flag_move = True\r\n                    x_square_light = min(x_square_light+1, Common_list.boards[stage-1][0][1])\r\n                active_tower = None\r\n                if Common_list.is_free_for_tower[stage-1][y_square_light][x_square_light] == 0 or Common_list.abv[stage-1][y_square_light][x_square_light] == 3 or\\\r\n                   {Common_list.abv[stage-1][y_square_light][x_square_light],\\\r\n                    Common_list.abv[stage-1][min(14, y_square_light+1)][x_square_light],\\\r\n                    Common_list.abv[stage-1][min(14, y_square_light+1)][min(29, x_square_light+1)],\\\r\n                    Common_list.abv[stage-1][y_square_light][min(29, x_square_light+1)]}.intersection({7,8}) != set():\r\n                    flag_build = False\r\n                    flag_tower = False\r\n                    text = \"You can't build tower there\"\r\n                elif Common_list.is_free_for_tower[stage-1][y_square_light][x_square_light] == 1:\r\n                    flag_build = True\r\n                    flag_tower = False\r\n                    text = \"You can build tower there\"\r\n                else:\r\n                    flag_build = False\r\n                    flag_tower = True\r\n                    active_tower = Common_list.towers[Common_list.is_free_for_tower[stage-1][y_square_light][x_square_light] - 2]\r\n                    text = \"There is tower LVL \" + str(active_tower.level)\r\n                erase_useless_buttons(text_font)\r\n                if flag_build:\r\n                    Common_list.buttons.append(BuildButton1(screen, 600, 650, play_menu_text_surface))\r\n                    Common_list.buttons.append(BuildButton2(screen, 890, 650, play_menu_text_surface))\r\n                elif flag_tower:\r\n                    Common_list.buttons.append(UpgradeButton(screen, 600, 650, play_menu_text_surface))\r\n                    Common_list.buttons.append(SellButton(screen, 900, 650, play_menu_text_surface))\r\n                if event.key == pygame.K_z:\r\n                    for button in Common_list.buttons:\r\n                        if button.type == \"upgrade_button\":\r\n                            if Common_list.is_free_for_tower[stage-1][y_square_light][x_square_light] > 1:\r\n                                twr = Common_list.towers[Common_list.is_free_for_tower[stage-1][y_square_light][x_square_light] - 2]\r\n                                money, text = button.upgrade_initiation(twr, money)\r\n                        if button.type == \"build_button_1\":\r\n                            flag_build = False\r\n                            flag_tower = True\r\n                            money, text, active_tower = button.build_initiation(money, screen, x_square_light, y_square_light,\r\n                                                            button, play_menu_text_surface, stage, active_tower)\r\n                elif event.key == pygame.K_x:\r\n                    for button in Common_list.buttons:\r\n                        if button.type == \"sell_button\":\r\n                            twr = Common_list.towers[Common_list.is_free_for_tower[stage-1][y_square_light][x_square_light] - 2]\r\n                            money += twr.price / 2\r\n                            while twr.level > 1:\r\n                                money += twr.upgrade_price[twr.level - 1] / 2\r\n                                twr.level -= 1\r\n                            twr.sell(stage)\r\n                            text = \"You can build tower there\"\r\n                            flag_build = True\r\n                            flag_tower = False\r\n                        if button.type == \"build_button_2\":\r\n                            flag_build = False\r\n                            flag_tower = True\r\n                            money, text, active_tower = button.build_initiation(money, screen, x_square_light, y_square_light,\r\n                                                            button, play_menu_text_surface, stage, active_tower)\r\n            \r\n            elif event.type == pygame.QUIT:\r\n                finished = True\r\n            \r\n        if pygame.key.get_pressed()[pygame.K_UP] and not flag_move:\r\n            if type_move != \"UP\":\r\n                time_move = 0\r\n                type_move = \"UP\"\r\n            time_move += 1\r\n            if time_move % 10 == 0:\r\n                y_square_light = max(y_square_light-1, Common_list.boards[stage-1][1][0])\r\n        elif pygame.key.get_pressed()[pygame.K_DOWN] and not flag_move:\r\n            if type_move != \"DOWN\":\r\n                time_move = 0\r\n                type_move = \"DOWN\"\r\n            time_move += 1\r\n            if time_move % 10 == 0:\r\n                y_square_light = min(y_square_light+1, Common_list.boards[stage-1][1][1])\r\n        elif pygame.key.get_pressed()[pygame.K_LEFT] and not flag_move:\r\n            if type_move != \"LEFT\":\r\n                time_move = 0\r\n                type_move = \"LEFT\"\r\n            time_move += 1\r\n            if time_move % 10 == 0:\r\n                x_square_light = max(x_square_light-1, Common_list.boards[stage-1][0][0])\r\n        elif pygame.key.get_pressed()[pygame.K_RIGHT] and not flag_move:\r\n            if type_move != \"RIGHT\":\r\n                time_move = 0\r\n                type_move = \"RIGHT\"\r\n            time_move += 1\r\n            if time_move % 10 == 0:\r\n                x_square_light = min(x_square_light+1, Common_list.boards[stage-1][0][1])\r\n        if Common_list.is_free_for_tower[stage-1][y_square_light][x_square_light] == 0 or Common_list.abv[stage-1][y_square_light][x_square_light] == 3 or\\\r\n           {Common_list.abv[stage-1][y_square_light][x_square_light],\\\r\n            Common_list.abv[stage-1][min(14, y_square_light+1)][x_square_light],\\\r\n            Common_list.abv[stage-1][min(14, y_square_light+1)][min(29, x_square_light+1)],\\\r\n            Common_list.abv[stage-1][y_square_light][min(29, x_square_light+1)]}.intersection({7,8}) != set():\r\n            flag_build = False\r\n            flag_tower = False\r\n            text = \"You can't build tower there\"\r\n        elif Common_list.is_free_for_tower[stage-1][y_square_light][x_square_light] == 1:\r\n            flag_build = True\r\n            flag_tower = False\r\n            text = \"You can build tower there\"\r\n        else:\r\n            flag_build = False\r\n            flag_tower = True\r\n            active_tower = Common_list.towers[Common_list.is_free_for_tower[stage-1][y_square_light][x_square_light] - 2]\r\n            text = \"There is tower LVL \" + str(active_tower.level)\r\n        \r\n        erase_useless_buttons(text_font)\r\n        if flag_build:\r\n            Common_list.buttons.append(BuildButton1(screen, 600, 650, play_menu_text_surface))\r\n            Common_list.buttons.append(BuildButton2(screen, 890, 650, play_menu_text_surface))\r\n        elif flag_tower:\r\n            Common_list.buttons.append(UpgradeButton(screen, 600, 650, play_menu_text_surface))\r\n            Common_list.buttons.append(SellButton(screen, 900, 650, play_menu_text_surface))\r\n\r\n        pygame.draw.polygon(screen, GREEN, ((x_square_light*SIDE, y_square_light*SIDE),\r\n                                            (x_square_light*SIDE + SIDE, y_square_light*SIDE),\r\n                                            (x_square_light*SIDE + SIDE, y_square_light*SIDE + SIDE),\r\n                                            (x_square_light*SIDE, y_square_light*SIDE + SIDE)), 1)\r\n        random_number = rnd.randint(1, 100)\r\n        if random_number == 1:\r\n            enemy = Enemy1(screen, start_positions[stage - 1][2], start_positions[stage - 1][0], time)\r\n            Common_list.enemies.append(enemy)\r\n        elif random_number == 100:\r\n            enemy = Enemy1(screen, start_positions[stage - 1][2], start_positions[stage - 1][1], time)\r\n            Common_list.enemies.append(enemy)\r\n\r\n        random_number = rnd.randint(1, 200)\r\n        if random_number == 1:\r\n            enemy = Enemy4(screen, start_positions[stage - 1][2], start_positions[stage - 1][0], time)\r\n            Common_list.enemies.append(enemy)\r\n        elif random_number == 200:\r\n            enemy = Enemy4(screen, start_positions[stage - 1][2], start_positions[stage - 1][1], time)\r\n            Common_list.enemies.append(enemy)\r\n\r\n        random_number = rnd.randint(1, 1000)\r\n        if random_number == 1:\r\n            enemy = Enemy2(screen, start_positions[stage - 1][2], start_positions[stage - 1][0], time)\r\n            Common_list.enemies.append(enemy)\r\n        elif random_number == 100:\r\n            enemy = Enemy2(screen, start_positions[stage - 1][2], start_positions[stage - 1][1], time)\r\n            Common_list.enemies.append(enemy)\r\n        for enemy in Common_list.enemies:\r\n            enemy.move(stage)\r\n            enemy.draw(time)\r\n\r\n        for bullet in Common_list.bullets:\r\n            money = bullet.hit_enemies(money)\r\n        for bullet in Common_list.bullets:\r\n            bullet.draw_and_move()\r\n\r\n        for tower in Common_list.towers:\r\n            if tower.type == 1:\r\n                if tower.t <= 0:\r\n                    tower.shoot()\r\n                    if tower.attacked_enemy:\r\n                        tower.t = tower.speed\r\n                tower.t -= 1\r\n            if tower.type == 2:\r\n                money = tower.shoot(money)\r\n            tower.draw()\r\n        if active_tower:\r\n            pygame.draw.circle(screen, GREEN, (active_tower.x, active_tower.y), active_tower.radius, 3)\r\n        fortress.hit()\r\n        if not fortress.alive_or_not():\r\n            finished = True\r\n            loose = True\r\n        time += Delta_t\r\n        screen.blit(play_menu_surface, play_menu_rect)\r\n        screen.blit(play_menu_text_surface.render(text, True, BLACK), (100, 675))\r\n        draw_clouds(stage)\r\n        for button in Common_list.buttons:\r\n            button.draw()\r\n        fortress.draw()\r\n        screen.blit(text_font.render(\"Money \" + str(int(money)), True, (0, 0, 0)), (10, 10))\r\n        screen.blit(text_font.render(\"FPS: \" + str(int(clock.get_fps())), True, (0, 0, 0)), (500, 10))\r\n        pygame.display.update()\r\n    return finished, loose\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Game_process.py b/Game_process.py
--- a/Game_process.py	(revision 3bc453ebe2f7d2b9ebabf20fdb341f95b712dca1)
+++ b/Game_process.py	(date 1671128232935)
@@ -251,6 +251,10 @@
         if random_number == 1:
             enemy = Enemy2(screen, start_positions[stage - 1][2], start_positions[stage - 1][0], time)
             Common_list.enemies.append(enemy)
+
+
+
+
         elif random_number == 100:
             enemy = Enemy2(screen, start_positions[stage - 1][2], start_positions[stage - 1][1], time)
             Common_list.enemies.append(enemy)
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"b335f9ad-e810-4b10-9557-e0b214f25eda\" name=\"Changes\" comment=\"test дорога, враги, текстуры\">\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/Textures.py\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/Textures.py\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/img/bee.png\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/img/bee.png\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/img/beeleft.png\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/img/beeleft.png\" afterDir=\"false\" />\r\n    </list>\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"FileTemplateManagerImpl\">\r\n    <option name=\"RECENT_TEMPLATES\">\r\n      <list>\r\n        <option value=\"Python Script\" />\r\n      </list>\r\n    </option>\r\n  </component>\r\n  <component name=\"Git.Settings\">\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\r\n  </component>\r\n  <component name=\"MarkdownSettingsMigration\">\r\n    <option name=\"stateVersion\" value=\"1\" />\r\n  </component>\r\n  <component name=\"ProjectId\" id=\"2IKEwcYEGPyJEKyqhMOzN3a8CtR\" />\r\n  <component name=\"ProjectLevelVcsManager\">\r\n    <OptionsSetting value=\"false\" id=\"Update\" />\r\n  </component>\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\">{\r\n  &quot;keyToString&quot;: {\r\n    &quot;RunOnceActivity.OpenProjectViewOnStart&quot;: &quot;true&quot;,\r\n    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,\r\n    &quot;last_opened_file_path&quot;: &quot;C:/Users/mihko/PycharmProjects/ProgaQuantum&quot;,\r\n    &quot;settings.editor.selected.configurable&quot;: &quot;com.jetbrains.python.configuration.PyActiveSdkModuleConfigurable&quot;\r\n  }\r\n}</component>\r\n  <component name=\"RunManager\">\r\n    <configuration name=\"main\" type=\"PythonConfigurationType\" factoryName=\"Python\" nameIsGenerated=\"true\">\r\n      <module name=\"ProgaQuantum\" />\r\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\r\n      <option name=\"PARENT_ENVS\" value=\"true\" />\r\n      <envs>\r\n        <env name=\"PYTHONUNBUFFERED\" value=\"1\" />\r\n      </envs>\r\n      <option name=\"SDK_HOME\" value=\"\" />\r\n      <option name=\"WORKING_DIRECTORY\" value=\"$PROJECT_DIR$\" />\r\n      <option name=\"IS_MODULE_SDK\" value=\"true\" />\r\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\r\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\r\n      <option name=\"SCRIPT_NAME\" value=\"$PROJECT_DIR$/main.py\" />\r\n      <option name=\"PARAMETERS\" value=\"\" />\r\n      <option name=\"SHOW_COMMAND_LINE\" value=\"false\" />\r\n      <option name=\"EMULATE_TERMINAL\" value=\"false\" />\r\n      <option name=\"MODULE_MODE\" value=\"false\" />\r\n      <option name=\"REDIRECT_INPUT\" value=\"false\" />\r\n      <option name=\"INPUT_FILE\" value=\"\" />\r\n      <method v=\"2\" />\r\n    </configuration>\r\n  </component>\r\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\r\n      <changelist id=\"b335f9ad-e810-4b10-9557-e0b214f25eda\" name=\"Changes\" comment=\"\" />\r\n      <created>1669922113170</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1669922113170</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00001\" summary=\"test\">\r\n      <created>1669922452656</created>\r\n      <option name=\"number\" value=\"00001\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00001\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1669922452656</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00002\" summary=\"Починил кнопку улучшения\">\r\n      <created>1669966502588</created>\r\n      <option name=\"number\" value=\"00002\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00002\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1669966502588</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00003\" summary=\"Реализованна продажа башен\">\r\n      <created>1669967463344</created>\r\n      <option name=\"number\" value=\"00003\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00003\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1669967463344</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00004\" summary=\"ААААА Я ВСЁЁЁ ПОЧИИНИИИЛ&#10;смена тестовых моделей врагов и башен при апгрейде\">\r\n      <created>1669971606735</created>\r\n      <option name=\"number\" value=\"00004\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00004\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1669971606735</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00005\" summary=\"Теперь программа смещает индексы при продаже башен и не случается list index out of range\">\r\n      <created>1669972030056</created>\r\n      <option name=\"number\" value=\"00005\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00005\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1669972030056</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00006\" summary=\"Осуществил постройку башен через кнопку в менюшке\">\r\n      <created>1669993980324</created>\r\n      <option name=\"number\" value=\"00006\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00006\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1669993980324</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00007\" summary=\"некоторые test модели и случайный ландшафт\">\r\n      <created>1670566121921</created>\r\n      <option name=\"number\" value=\"00007\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00007\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1670566121921</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00008\" summary=\"Теперь выбор уровня в меню действительно на что-то влияет\">\r\n      <created>1670602731136</created>\r\n      <option name=\"number\" value=\"00008\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00008\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1670602731136</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00009\" summary=\"Сделал второй тип врагов через наследование\">\r\n      <created>1670603128191</created>\r\n      <option name=\"number\" value=\"00009\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00009\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1670603128191</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00010\" summary=\"Одно малюсенькое исправление по классам, еоторое забыл в предыдущем коммите (буквально две строчки)\">\r\n      <created>1670603507511</created>\r\n      <option name=\"number\" value=\"00010\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00010\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1670603507511</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00011\" summary=\"Теперь меню не отображает кнопку запуска игры, если игрок не выбрал уровень, выбранный игроком уровень подсвечивается красным\">\r\n      <created>1670604528605</created>\r\n      <option name=\"number\" value=\"00011\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00011\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1670604528605</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00012\" summary=\"Теперь при нажатии на кнопку quit игрока выбрасывает в главное меню, сделан экран &quot;game over&quot; с возможностью выйти в главное меню или выйти из игры после поражения\">\r\n      <created>1670606245445</created>\r\n      <option name=\"number\" value=\"00012\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00012\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1670606245445</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00013\" summary=\"test дорога, враги, текстуры\">\r\n      <created>1671120195792</created>\r\n      <option name=\"number\" value=\"00013\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00013\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1671120195792</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00014\" summary=\"test дорога, враги, текстуры\">\r\n      <created>1671120223541</created>\r\n      <option name=\"number\" value=\"00014\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00014\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1671120223541</updated>\r\n    </task>\r\n    <option name=\"localTasksCounter\" value=\"15\" />\r\n    <servers />\r\n  </component>\r\n  <component name=\"Vcs.Log.Tabs.Properties\">\r\n    <option name=\"TAB_STATES\">\r\n      <map>\r\n        <entry key=\"MAIN\">\r\n          <value>\r\n            <State />\r\n          </value>\r\n        </entry>\r\n      </map>\r\n    </option>\r\n  </component>\r\n  <component name=\"VcsManagerConfiguration\">\r\n    <MESSAGE value=\"test\" />\r\n    <MESSAGE value=\"Починил кнопку улучшения\" />\r\n    <MESSAGE value=\"Реализованна продажа башен\" />\r\n    <MESSAGE value=\"ААААА Я ВСЁЁЁ ПОЧИИНИИИЛ&#10;смена тестовых моделей врагов и башен при апгрейде\" />\r\n    <MESSAGE value=\"Теперь программа смещает индексы при продаже башен и не случается list index out of range\" />\r\n    <MESSAGE value=\"Осуществил постройку башен через кнопку в менюшке\" />\r\n    <MESSAGE value=\"некоторые test модели и случайный ландшафт\" />\r\n    <MESSAGE value=\"Теперь выбор уровня в меню действительно на что-то влияет\" />\r\n    <MESSAGE value=\"Сделал второй тип врагов через наследование\" />\r\n    <MESSAGE value=\"Одно малюсенькое исправление по классам, еоторое забыл в предыдущем коммите (буквально две строчки)\" />\r\n    <MESSAGE value=\"Теперь меню не отображает кнопку запуска игры, если игрок не выбрал уровень, выбранный игроком уровень подсвечивается красным\" />\r\n    <MESSAGE value=\"Теперь при нажатии на кнопку quit игрока выбрасывает в главное меню, сделан экран &quot;game over&quot; с возможностью выйти в главное меню или выйти из игры после поражения\" />\r\n    <MESSAGE value=\"test дорога, враги, текстуры\" />\r\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"test дорога, враги, текстуры\" />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision 3bc453ebe2f7d2b9ebabf20fdb341f95b712dca1)
+++ b/.idea/workspace.xml	(date 1671127724752)
@@ -1,11 +1,13 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <project version="4">
   <component name="ChangeListManager">
-    <list default="true" id="b335f9ad-e810-4b10-9557-e0b214f25eda" name="Changes" comment="test дорога, враги, текстуры">
+    <list default="true" id="b335f9ad-e810-4b10-9557-e0b214f25eda" name="Changes" comment="враг &quot;пчола&quot; и дорога">
       <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/Buttons.py" beforeDir="false" afterPath="$PROJECT_DIR$/Buttons.py" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/Classes.py" beforeDir="false" afterPath="$PROJECT_DIR$/Classes.py" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/Game_process.py" beforeDir="false" afterPath="$PROJECT_DIR$/Game_process.py" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/Textures.py" beforeDir="false" afterPath="$PROJECT_DIR$/Textures.py" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/img/bee.png" beforeDir="false" afterPath="$PROJECT_DIR$/img/bee.png" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/img/beeleft.png" beforeDir="false" afterPath="$PROJECT_DIR$/img/beeleft.png" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/img/dmg.png" beforeDir="false" afterPath="$PROJECT_DIR$/img/dmg.png" afterDir="false" />
     </list>
     <option name="SHOW_DIALOG" value="false" />
     <option name="HIGHLIGHT_CONFLICTS" value="true" />
@@ -171,7 +173,14 @@
       <option name="project" value="LOCAL" />
       <updated>1671120223541</updated>
     </task>
-    <option name="localTasksCounter" value="15" />
+    <task id="LOCAL-00015" summary="враг &quot;пчола&quot; и дорога">
+      <created>1671124211259</created>
+      <option name="number" value="00015" />
+      <option name="presentableId" value="LOCAL-00015" />
+      <option name="project" value="LOCAL" />
+      <updated>1671124211259</updated>
+    </task>
+    <option name="localTasksCounter" value="16" />
     <servers />
   </component>
   <component name="Vcs.Log.Tabs.Properties">
@@ -199,6 +208,7 @@
     <MESSAGE value="Теперь меню не отображает кнопку запуска игры, если игрок не выбрал уровень, выбранный игроком уровень подсвечивается красным" />
     <MESSAGE value="Теперь при нажатии на кнопку quit игрока выбрасывает в главное меню, сделан экран &quot;game over&quot; с возможностью выйти в главное меню или выйти из игры после поражения" />
     <MESSAGE value="test дорога, враги, текстуры" />
-    <option name="LAST_COMMIT_MESSAGE" value="test дорога, враги, текстуры" />
+    <MESSAGE value="враг &quot;пчола&quot; и дорога" />
+    <option name="LAST_COMMIT_MESSAGE" value="враг &quot;пчола&quot; и дорога" />
   </component>
 </project>
\ No newline at end of file
